
MATRIX-COMP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ec6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000ec6  00000f5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800066  00800066  00000f60  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f60  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001001  00000000  00000000  0000101c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006fe  00000000  00000000  0000201d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000070e  00000000  00000000  0000271b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00002e2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b6  00000000  00000000  00002ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008cf  00000000  00000000  00003286  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00003b55  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a6 e6       	ldi	r26, 0x66	; 102
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ab 36       	cpi	r26, 0x6B	; 107
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	e6 ec       	ldi	r30, 0xC6	; 198
  78:	fe e0       	ldi	r31, 0x0E	; 14
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>
  86:	0e 94 fd 00 	call	0x1fa	; 0x1fa <main>
  8a:	0c 94 61 07 	jmp	0xec2	; 0xec2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <USART_Init>:
	
	// enable global interrupts
	sei();
	
	// initialize overflow counter variable
	tot_overflow = 0;
  92:	90 bd       	out	0x20, r25	; 32
  94:	89 b9       	out	0x09, r24	; 9
  96:	88 e1       	ldi	r24, 0x18	; 24
  98:	8a b9       	out	0x0a, r24	; 10
  9a:	8e e8       	ldi	r24, 0x8E	; 142
  9c:	80 bd       	out	0x20, r24	; 32
  9e:	08 95       	ret

000000a0 <USART_Transmit>:
  a0:	5d 9b       	sbis	0x0b, 5	; 11
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <USART_Transmit>
  a4:	8c b9       	out	0x0c, r24	; 12
  a6:	08 95       	ret

000000a8 <USART_TransmitF>:
  a8:	2b 01       	movw	r4, r22
  aa:	3c 01       	movw	r6, r24
  ac:	20 e0       	ldi	r18, 0x00	; 0
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	a9 01       	movw	r20, r18
  b2:	0e 94 96 04 	call	0x92c	; 0x92c <__cmpsf2>
  b6:	88 23       	and	r24, r24
  b8:	24 f4       	brge	.+8      	; 0xc2 <USART_TransmitF+0x1a>
  ba:	77 fa       	bst	r7, 7
  bc:	70 94       	com	r7
  be:	77 f8       	bld	r7, 7
  c0:	70 94       	com	r7
  c2:	0f 2e       	mov	r0, r31
  c4:	fa e0       	ldi	r31, 0x0A	; 10
  c6:	8f 2e       	mov	r8, r31
  c8:	91 2c       	mov	r9, r1
  ca:	a1 2c       	mov	r10, r1
  cc:	b1 2c       	mov	r11, r1
  ce:	f0 2d       	mov	r31, r0
  d0:	81 e6       	ldi	r24, 0x61	; 97
  d2:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
  d6:	2f ef       	ldi	r18, 0xFF	; 255
  d8:	8f e7       	ldi	r24, 0x7F	; 127
  da:	94 e0       	ldi	r25, 0x04	; 4
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <USART_TransmitF+0x34>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <USART_TransmitF+0x3e>
  e6:	00 00       	nop
  e8:	20 e8       	ldi	r18, 0x80	; 128
  ea:	36 e9       	ldi	r19, 0x96	; 150
  ec:	48 e1       	ldi	r20, 0x18	; 24
  ee:	5b e4       	ldi	r21, 0x4B	; 75
  f0:	c3 01       	movw	r24, r6
  f2:	b2 01       	movw	r22, r4
  f4:	0e 94 b1 05 	call	0xb62	; 0xb62 <__mulsf3>
  f8:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__fixunssfsi>
  fc:	6b 01       	movw	r12, r22
  fe:	7c 01       	movw	r14, r24
 100:	25 e9       	ldi	r18, 0x95	; 149
 102:	3f eb       	ldi	r19, 0xBF	; 191
 104:	46 ed       	ldi	r20, 0xD6	; 214
 106:	53 e3       	ldi	r21, 0x33	; 51
 108:	c3 01       	movw	r24, r6
 10a:	b2 01       	movw	r22, r4
 10c:	0e 94 96 04 	call	0x92c	; 0x92c <__cmpsf2>
 110:	88 23       	and	r24, r24
 112:	1c f4       	brge	.+6      	; 0x11a <USART_TransmitF+0x72>
 114:	81 e7       	ldi	r24, 0x71	; 113
 116:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
 11a:	2d eb       	ldi	r18, 0xBD	; 189
 11c:	37 e3       	ldi	r19, 0x37	; 55
 11e:	46 e8       	ldi	r20, 0x86	; 134
 120:	55 e3       	ldi	r21, 0x35	; 53
 122:	c3 01       	movw	r24, r6
 124:	b2 01       	movw	r22, r4
 126:	0e 94 96 04 	call	0x92c	; 0x92c <__cmpsf2>
 12a:	88 23       	and	r24, r24
 12c:	1c f4       	brge	.+6      	; 0x134 <USART_TransmitF+0x8c>
 12e:	8a e7       	ldi	r24, 0x7A	; 122
 130:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
 134:	2c ea       	ldi	r18, 0xAC	; 172
 136:	35 ec       	ldi	r19, 0xC5	; 197
 138:	47 e2       	ldi	r20, 0x27	; 39
 13a:	57 e3       	ldi	r21, 0x37	; 55
 13c:	c3 01       	movw	r24, r6
 13e:	b2 01       	movw	r22, r4
 140:	0e 94 96 04 	call	0x92c	; 0x92c <__cmpsf2>
 144:	88 23       	and	r24, r24
 146:	1c f4       	brge	.+6      	; 0x14e <USART_TransmitF+0xa6>
 148:	84 e6       	ldi	r24, 0x64	; 100
 14a:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
 14e:	c1 14       	cp	r12, r1
 150:	d1 04       	cpc	r13, r1
 152:	e1 04       	cpc	r14, r1
 154:	f1 04       	cpc	r15, r1
 156:	09 f4       	brne	.+2      	; 0x15a <USART_TransmitF+0xb2>
 158:	bb cf       	rjmp	.-138    	; 0xd0 <USART_TransmitF+0x28>
 15a:	cc 2d       	mov	r28, r12
 15c:	c7 01       	movw	r24, r14
 15e:	b6 01       	movw	r22, r12
 160:	a5 01       	movw	r20, r10
 162:	94 01       	movw	r18, r8
 164:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__udivmodsi4>
 168:	c2 2e       	mov	r12, r18
 16a:	d3 2e       	mov	r13, r19
 16c:	e4 2e       	mov	r14, r20
 16e:	f5 2e       	mov	r15, r21
 170:	80 e3       	ldi	r24, 0x30	; 48
 172:	8c 0f       	add	r24, r28
 174:	22 0f       	add	r18, r18
 176:	92 2f       	mov	r25, r18
 178:	99 0f       	add	r25, r25
 17a:	99 0f       	add	r25, r25
 17c:	29 0f       	add	r18, r25
 17e:	82 1b       	sub	r24, r18
 180:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
 184:	2f ef       	ldi	r18, 0xFF	; 255
 186:	8f eb       	ldi	r24, 0xBF	; 191
 188:	96 e0       	ldi	r25, 0x06	; 6
 18a:	21 50       	subi	r18, 0x01	; 1
 18c:	80 40       	sbci	r24, 0x00	; 0
 18e:	90 40       	sbci	r25, 0x00	; 0
 190:	e1 f7       	brne	.-8      	; 0x18a <USART_TransmitF+0xe2>
 192:	00 c0       	rjmp	.+0      	; 0x194 <USART_TransmitF+0xec>
 194:	00 00       	nop
 196:	87 e7       	ldi	r24, 0x77	; 119
 198:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
 19c:	2f ef       	ldi	r18, 0xFF	; 255
 19e:	8f e7       	ldi	r24, 0x7F	; 127
 1a0:	94 e0       	ldi	r25, 0x04	; 4
 1a2:	21 50       	subi	r18, 0x01	; 1
 1a4:	80 40       	sbci	r24, 0x00	; 0
 1a6:	90 40       	sbci	r25, 0x00	; 0
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <USART_TransmitF+0xfa>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <USART_TransmitF+0x104>
 1ac:	00 00       	nop
 1ae:	c1 14       	cp	r12, r1
 1b0:	d1 04       	cpc	r13, r1
 1b2:	e1 04       	cpc	r14, r1
 1b4:	f1 04       	cpc	r15, r1
 1b6:	89 f6       	brne	.-94     	; 0x15a <USART_TransmitF+0xb2>
 1b8:	8b cf       	rjmp	.-234    	; 0xd0 <USART_TransmitF+0x28>

000001ba <timer0_init>:
 1ba:	83 b7       	in	r24, 0x33	; 51
 1bc:	83 bf       	out	0x33, r24	; 51
 1be:	83 b7       	in	r24, 0x33	; 51
 1c0:	83 bf       	out	0x33, r24	; 51
 1c2:	83 b7       	in	r24, 0x33	; 51
 1c4:	81 60       	ori	r24, 0x01	; 1
 1c6:	83 bf       	out	0x33, r24	; 51
 1c8:	89 b7       	in	r24, 0x39	; 57
 1ca:	81 60       	ori	r24, 0x01	; 1
 1cc:	89 bf       	out	0x39, r24	; 57
 1ce:	78 94       	sei
 1d0:	12 be       	out	0x32, r1	; 50
 1d2:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end>
 1d6:	08 95       	ret

000001d8 <__vector_11>:



// called whenever TCNT1 overflows
ISR(TIMER0_OVF_vect)
{
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	8f 93       	push	r24
	// keep a track of number of overflows
	tot_overflow++;
 1e4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 1e8:	8f 5f       	subi	r24, 0xFF	; 255
 1ea:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
	
}
 1ee:	8f 91       	pop	r24
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

000001fa <main>:




int main()
{
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62
 202:	6c 97       	sbiw	r28, 0x1c	; 28
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	f8 94       	cli
 208:	de bf       	out	0x3e, r29	; 62
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	cd bf       	out	0x3d, r28	; 61
	
	USART_Init(95);
 20e:	8f e5       	ldi	r24, 0x5F	; 95
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 49 00 	call	0x92	; 0x92 <USART_Init>
	
	timer0_init();
 216:	0e 94 dd 00 	call	0x1ba	; 0x1ba <timer0_init>
    float **input, **Inverse, *temp, localVariable, app;
    uint8_t i, j, k, sizeOfMatrix, lindex;
	USART_Transmit('a');
 21a:	81 e6       	ldi	r24, 0x61	; 97
 21c:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
    //printf("Enter matrix size. It's a square matrix. So enter value of n (nXn)\n"); //CodewithC.com
    //scanf_s("%d", &sizeOfMatrix);

    sizeOfMatrix = 3;

    input = (float **)malloc(sizeOfMatrix * sizeof(float *));
 220:	86 e0       	ldi	r24, 0x06	; 6
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 40 06 	call	0xc80	; 0xc80 <malloc>
 228:	2c 01       	movw	r4, r24
 22a:	8f 8b       	std	Y+23, r24	; 0x17
 22c:	58 8e       	std	Y+24, r5	; 0x18
 22e:	8c 01       	movw	r16, r24
 230:	0a 5f       	subi	r16, 0xFA	; 250
 232:	1f 4f       	sbci	r17, 0xFF	; 255
 234:	9a 83       	std	Y+2, r25	; 0x02
 236:	89 83       	std	Y+1, r24	; 0x01

    for (i = 0; i<sizeOfMatrix; i++)
        input[i] = (float *)malloc(sizeOfMatrix * sizeof(float));
 238:	8c e0       	ldi	r24, 0x0C	; 12
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 40 06 	call	0xc80	; 0xc80 <malloc>
 240:	a9 81       	ldd	r26, Y+1	; 0x01
 242:	ba 81       	ldd	r27, Y+2	; 0x02
 244:	8d 93       	st	X+, r24
 246:	9d 93       	st	X+, r25
 248:	ba 83       	std	Y+2, r27	; 0x02
 24a:	a9 83       	std	Y+1, r26	; 0x01

    sizeOfMatrix = 3;

    input = (float **)malloc(sizeOfMatrix * sizeof(float *));

    for (i = 0; i<sizeOfMatrix; i++)
 24c:	a0 17       	cp	r26, r16
 24e:	b1 07       	cpc	r27, r17
 250:	99 f7       	brne	.-26     	; 0x238 <main+0x3e>
        input[i] = (float *)malloc(sizeOfMatrix * sizeof(float));

    Inverse = (float **)malloc(sizeOfMatrix * sizeof(float *));
 252:	86 e0       	ldi	r24, 0x06	; 6
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 40 06 	call	0xc80	; 0xc80 <malloc>
 25a:	98 8b       	std	Y+16, r25	; 0x10
 25c:	8f 87       	std	Y+15, r24	; 0x0f
	temp = (float*)malloc(sizeOfMatrix * sizeof(float));
 25e:	8c e0       	ldi	r24, 0x0C	; 12
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 40 06 	call	0xc80	; 0xc80 <malloc>
 266:	8b 8b       	std	Y+19, r24	; 0x13
 268:	9c 8b       	std	Y+20, r25	; 0x14
 26a:	bf 85       	ldd	r27, Y+15	; 0x0f
 26c:	b9 8f       	std	Y+25, r27	; 0x19
 26e:	e8 89       	ldd	r30, Y+16	; 0x10
 270:	ea 8f       	std	Y+26, r30	; 0x1a
 272:	2f 85       	ldd	r18, Y+15	; 0x0f
 274:	38 89       	ldd	r19, Y+16	; 0x10
 276:	2a 5f       	subi	r18, 0xFA	; 250
 278:	3f 4f       	sbci	r19, 0xFF	; 255
 27a:	0f 85       	ldd	r16, Y+15	; 0x0f
 27c:	18 89       	ldd	r17, Y+16	; 0x10
 27e:	3a 83       	std	Y+2, r19	; 0x02
 280:	29 83       	std	Y+1, r18	; 0x01


    for (i = 0; i<sizeOfMatrix; i++)
    {

        Inverse[i] = (float *)malloc(sizeOfMatrix * sizeof(float));
 282:	8c e0       	ldi	r24, 0x0C	; 12
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 40 06 	call	0xc80	; 0xc80 <malloc>
 28a:	d8 01       	movw	r26, r16
 28c:	8d 93       	st	X+, r24
 28e:	9d 93       	st	X+, r25
 290:	8d 01       	movw	r16, r26

    Inverse = (float **)malloc(sizeOfMatrix * sizeof(float *));
	temp = (float*)malloc(sizeOfMatrix * sizeof(float));


    for (i = 0; i<sizeOfMatrix; i++)
 292:	e9 81       	ldd	r30, Y+1	; 0x01
 294:	fa 81       	ldd	r31, Y+2	; 0x02
 296:	ae 17       	cp	r26, r30
 298:	bf 07       	cpc	r27, r31
 29a:	99 f7       	brne	.-26     	; 0x282 <main+0x88>
    {

        Inverse[i] = (float *)malloc(sizeOfMatrix * sizeof(float));
    }
	USART_Transmit('b');
 29c:	82 e6       	ldi	r24, 0x62	; 98
 29e:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
	input[0][0] = 4;
	input[0][1] = 2;
	input[1][0] = 7;
	input[1][1] = 3;
	*/
	USART_Transmit('c');
 2a2:	83 e6       	ldi	r24, 0x63	; 99
 2a4:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a8:	ff ef       	ldi	r31, 0xFF	; 255
 2aa:	2f e7       	ldi	r18, 0x7F	; 127
 2ac:	34 e0       	ldi	r19, 0x04	; 4
 2ae:	f1 50       	subi	r31, 0x01	; 1
 2b0:	20 40       	sbci	r18, 0x00	; 0
 2b2:	30 40       	sbci	r19, 0x00	; 0
 2b4:	e1 f7       	brne	.-8      	; 0x2ae <main+0xb4>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <main+0xbe>
 2b8:	00 00       	nop
	_delay_ms(100);
	
    input[0][0] = 1;
 2ba:	d2 01       	movw	r26, r4
 2bc:	ed 91       	ld	r30, X+
 2be:	fc 91       	ld	r31, X
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	a0 e8       	ldi	r26, 0x80	; 128
 2c6:	bf e3       	ldi	r27, 0x3F	; 63
 2c8:	80 83       	st	Z, r24
 2ca:	91 83       	std	Z+1, r25	; 0x01
 2cc:	a2 83       	std	Z+2, r26	; 0x02
 2ce:	b3 83       	std	Z+3, r27	; 0x03
    input[0][1] = 8;
 2d0:	40 e0       	ldi	r20, 0x00	; 0
 2d2:	50 e0       	ldi	r21, 0x00	; 0
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	71 e4       	ldi	r23, 0x41	; 65
 2d8:	44 83       	std	Z+4, r20	; 0x04
 2da:	55 83       	std	Z+5, r21	; 0x05
 2dc:	66 83       	std	Z+6, r22	; 0x06
 2de:	77 83       	std	Z+7, r23	; 0x07
    input[0][2] = 7;
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	a0 ee       	ldi	r26, 0xE0	; 224
 2e6:	b0 e4       	ldi	r27, 0x40	; 64
 2e8:	80 87       	std	Z+8, r24	; 0x08
 2ea:	91 87       	std	Z+9, r25	; 0x09
 2ec:	a2 87       	std	Z+10, r26	; 0x0a
 2ee:	b3 87       	std	Z+11, r27	; 0x0b
    input[1][0] = 4;
 2f0:	d2 01       	movw	r26, r4
 2f2:	12 96       	adiw	r26, 0x02	; 2
 2f4:	ed 91       	ld	r30, X+
 2f6:	fc 91       	ld	r31, X
 2f8:	13 97       	sbiw	r26, 0x03	; 3
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	a0 e8       	ldi	r26, 0x80	; 128
 300:	b0 e4       	ldi	r27, 0x40	; 64
 302:	80 83       	st	Z, r24
 304:	91 83       	std	Z+1, r25	; 0x01
 306:	a2 83       	std	Z+2, r26	; 0x02
 308:	b3 83       	std	Z+3, r27	; 0x03
    input[1][1] = 0;
 30a:	14 82       	std	Z+4, r1	; 0x04
 30c:	15 82       	std	Z+5, r1	; 0x05
 30e:	16 82       	std	Z+6, r1	; 0x06
 310:	17 82       	std	Z+7, r1	; 0x07
    input[1][2] = 6;
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	a0 ec       	ldi	r26, 0xC0	; 192
 318:	b0 e4       	ldi	r27, 0x40	; 64
 31a:	80 87       	std	Z+8, r24	; 0x08
 31c:	91 87       	std	Z+9, r25	; 0x09
 31e:	a2 87       	std	Z+10, r26	; 0x0a
 320:	b3 87       	std	Z+11, r27	; 0x0b
    input[2][0] = 5;
 322:	d2 01       	movw	r26, r4
 324:	14 96       	adiw	r26, 0x04	; 4
 326:	ed 91       	ld	r30, X+
 328:	fc 91       	ld	r31, X
 32a:	15 97       	sbiw	r26, 0x05	; 5
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	a0 ea       	ldi	r26, 0xA0	; 160
 332:	b0 e4       	ldi	r27, 0x40	; 64
 334:	80 83       	st	Z, r24
 336:	91 83       	std	Z+1, r25	; 0x01
 338:	a2 83       	std	Z+2, r26	; 0x02
 33a:	b3 83       	std	Z+3, r27	; 0x03
    input[2][1] = 8;
 33c:	44 83       	std	Z+4, r20	; 0x04
 33e:	55 83       	std	Z+5, r21	; 0x05
 340:	66 83       	std	Z+6, r22	; 0x06
 342:	77 83       	std	Z+7, r23	; 0x07
    input[2][2] = 5;
 344:	80 87       	std	Z+8, r24	; 0x08
 346:	91 87       	std	Z+9, r25	; 0x09
 348:	a2 87       	std	Z+10, r26	; 0x0a
 34a:	b3 87       	std	Z+11, r27	; 0x0b
	
	USART_Transmit('y');
 34c:	89 e7       	ldi	r24, 0x79	; 121
 34e:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
	input[5][2] = 0;
	input[5][3] = 0;
	input[5][4] = 0;
	input[5][5] = 1;
	*/
	USART_Transmit('d');
 352:	84 e6       	ldi	r24, 0x64	; 100
 354:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
 358:	af 85       	ldd	r26, Y+15	; 0x0f
 35a:	b8 89       	ldd	r27, Y+16	; 0x10
	

    for (i = 0; i<sizeOfMatrix; i = i+1)
 35c:	30 e0       	ldi	r19, 0x00	; 0
        for (j = 0; j<sizeOfMatrix; j = j+1)
            if (i == j)
                Inverse[i][j] = 1;
 35e:	40 e0       	ldi	r20, 0x00	; 0
 360:	50 e0       	ldi	r21, 0x00	; 0
 362:	60 e8       	ldi	r22, 0x80	; 128
 364:	7f e3       	ldi	r23, 0x3F	; 63
 366:	93 2f       	mov	r25, r19
 368:	1e c0       	rjmp	.+60     	; 0x3a6 <main+0x1ac>
	USART_Transmit('d');
	

    for (i = 0; i<sizeOfMatrix; i = i+1)
        for (j = 0; j<sizeOfMatrix; j = j+1)
            if (i == j)
 36a:	98 13       	cpse	r25, r24
 36c:	0a c0       	rjmp	.+20     	; 0x382 <main+0x188>
                Inverse[i][j] = 1;
 36e:	ed 91       	ld	r30, X+
 370:	fc 91       	ld	r31, X
 372:	11 97       	sbiw	r26, 0x01	; 1
 374:	e2 0f       	add	r30, r18
 376:	f3 1f       	adc	r31, r19
 378:	40 83       	st	Z, r20
 37a:	51 83       	std	Z+1, r21	; 0x01
 37c:	62 83       	std	Z+2, r22	; 0x02
 37e:	73 83       	std	Z+3, r23	; 0x03
 380:	09 c0       	rjmp	.+18     	; 0x394 <main+0x19a>
            else
                Inverse[i][j] = 0;
 382:	ed 91       	ld	r30, X+
 384:	fc 91       	ld	r31, X
 386:	11 97       	sbiw	r26, 0x01	; 1
 388:	e2 0f       	add	r30, r18
 38a:	f3 1f       	adc	r31, r19
 38c:	10 82       	st	Z, r1
 38e:	11 82       	std	Z+1, r1	; 0x01
 390:	12 82       	std	Z+2, r1	; 0x02
 392:	13 82       	std	Z+3, r1	; 0x03
	*/
	USART_Transmit('d');
	

    for (i = 0; i<sizeOfMatrix; i = i+1)
        for (j = 0; j<sizeOfMatrix; j = j+1)
 394:	8f 5f       	subi	r24, 0xFF	; 255
 396:	2c 5f       	subi	r18, 0xFC	; 252
 398:	3f 4f       	sbci	r19, 0xFF	; 255
 39a:	83 30       	cpi	r24, 0x03	; 3
 39c:	31 f7       	brne	.-52     	; 0x36a <main+0x170>
	input[5][5] = 1;
	*/
	USART_Transmit('d');
	

    for (i = 0; i<sizeOfMatrix; i = i+1)
 39e:	9f 5f       	subi	r25, 0xFF	; 255
 3a0:	12 96       	adiw	r26, 0x02	; 2
 3a2:	93 30       	cpi	r25, 0x03	; 3
 3a4:	21 f0       	breq	.+8      	; 0x3ae <main+0x1b4>

    for (i = 0; i<sizeOfMatrix; i++)
        input[i] = (float *)malloc(sizeOfMatrix * sizeof(float));

    Inverse = (float **)malloc(sizeOfMatrix * sizeof(float *));
	temp = (float*)malloc(sizeOfMatrix * sizeof(float));
 3a6:	20 e0       	ldi	r18, 0x00	; 0
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	de cf       	rjmp	.-68     	; 0x36a <main+0x170>
            if (i == j)
                Inverse[i][j] = 1;
            else
                Inverse[i][j] = 0;

	USART_Transmit('e');
 3ae:	85 e6       	ldi	r24, 0x65	; 101
 3b0:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
 3b4:	bf ef       	ldi	r27, 0xFF	; 255
 3b6:	ef e7       	ldi	r30, 0x7F	; 127
 3b8:	f4 e0       	ldi	r31, 0x04	; 4
 3ba:	b1 50       	subi	r27, 0x01	; 1
 3bc:	e0 40       	sbci	r30, 0x00	; 0
 3be:	f0 40       	sbci	r31, 0x00	; 0
 3c0:	e1 f7       	brne	.-8      	; 0x3ba <main+0x1c0>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <main+0x1ca>
 3c4:	00 00       	nop
 3c6:	2f 85       	ldd	r18, Y+15	; 0x0f
 3c8:	38 89       	ldd	r19, Y+16	; 0x10
 3ca:	3d 87       	std	Y+13, r19	; 0x0d
 3cc:	2c 87       	std	Y+12, r18	; 0x0c
 3ce:	5a 8a       	std	Y+18, r5	; 0x12
 3d0:	49 8a       	std	Y+17, r4	; 0x11
 3d2:	21 2c       	mov	r2, r1
 3d4:	31 2c       	mov	r3, r1
	_delay_ms(100);
    for (k = 0; k<sizeOfMatrix; k = k+1)
 3d6:	19 86       	std	Y+9, r1	; 0x09
 3d8:	3f ef       	ldi	r19, 0xFF	; 255
 3da:	8f e7       	ldi	r24, 0x7F	; 127
 3dc:	94 e0       	ldi	r25, 0x04	; 4
 3de:	31 50       	subi	r19, 0x01	; 1
 3e0:	80 40       	sbci	r24, 0x00	; 0
 3e2:	90 40       	sbci	r25, 0x00	; 0
 3e4:	e1 f7       	brne	.-8      	; 0x3de <main+0x1e4>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <main+0x1ee>
 3e8:	00 00       	nop
    {
		
		_delay_ms(100);
		USART_Transmit('i');
 3ea:	89 e6       	ldi	r24, 0x69	; 105
 3ec:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
 3f0:	af ef       	ldi	r26, 0xFF	; 255
 3f2:	bf e7       	ldi	r27, 0x7F	; 127
 3f4:	e4 e0       	ldi	r30, 0x04	; 4
 3f6:	a1 50       	subi	r26, 0x01	; 1
 3f8:	b0 40       	sbci	r27, 0x00	; 0
 3fa:	e0 40       	sbci	r30, 0x00	; 0
 3fc:	e1 f7       	brne	.-8      	; 0x3f6 <main+0x1fc>
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <__LOCK_REGION_LENGTH__>
 400:	00 00       	nop
		_delay_ms(100);
		app = input[k][k];
 402:	a9 89       	ldd	r26, Y+17	; 0x11
 404:	ba 89       	ldd	r27, Y+18	; 0x12
 406:	0d 91       	ld	r16, X+
 408:	1d 91       	ld	r17, X+
 40a:	ba 8b       	std	Y+18, r27	; 0x12
 40c:	a9 8b       	std	Y+17, r26	; 0x11
 40e:	f8 01       	movw	r30, r16
 410:	e2 0d       	add	r30, r2
 412:	f3 1d       	adc	r31, r3
 414:	fe 83       	std	Y+6, r31	; 0x06
 416:	ed 83       	std	Y+5, r30	; 0x05
 418:	c0 80       	ld	r12, Z
 41a:	d1 80       	ldd	r13, Z+1	; 0x01
 41c:	e2 80       	ldd	r14, Z+2	; 0x02
 41e:	f3 80       	ldd	r15, Z+3	; 0x03
		lindex = k;


		for (uint8_t l = k + 1; l < sizeOfMatrix; l = l+1)
 420:	f9 85       	ldd	r31, Y+9	; 0x09
 422:	ff 5f       	subi	r31, 0xFF	; 255
 424:	fe 87       	std	Y+14, r31	; 0x0e
 426:	f3 30       	cpi	r31, 0x03	; 3
 428:	28 f5       	brcc	.+74     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 42a:	69 84       	ldd	r6, Y+9	; 0x09
 42c:	f9 83       	std	Y+1, r31	; 0x01
		if (fabs(app) < fabs(input[l][k])) {
 42e:	29 81       	ldd	r18, Y+1	; 0x01
 430:	e2 2f       	mov	r30, r18
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	ee 0f       	add	r30, r30
 436:	ff 1f       	adc	r31, r31
 438:	e4 0d       	add	r30, r4
 43a:	f5 1d       	adc	r31, r5
 43c:	01 90       	ld	r0, Z+
 43e:	f0 81       	ld	r31, Z
 440:	e0 2d       	mov	r30, r0
 442:	e2 0d       	add	r30, r2
 444:	f3 1d       	adc	r31, r3
 446:	80 80       	ld	r8, Z
 448:	91 80       	ldd	r9, Z+1	; 0x01
 44a:	a2 80       	ldd	r10, Z+2	; 0x02
 44c:	b3 80       	ldd	r11, Z+3	; 0x03
 44e:	a5 01       	movw	r20, r10
 450:	94 01       	movw	r18, r8
 452:	5f 77       	andi	r21, 0x7F	; 127
 454:	c7 01       	movw	r24, r14
 456:	b6 01       	movw	r22, r12
 458:	9f 77       	andi	r25, 0x7F	; 127
 45a:	0e 94 96 04 	call	0x92c	; 0x92c <__cmpsf2>
 45e:	88 23       	and	r24, r24
 460:	1c f4       	brge	.+6      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 462:	69 80       	ldd	r6, Y+1	; 0x01
			app = input[l][k];
 464:	75 01       	movw	r14, r10
 466:	64 01       	movw	r12, r8
		_delay_ms(100);
		app = input[k][k];
		lindex = k;


		for (uint8_t l = k + 1; l < sizeOfMatrix; l = l+1)
 468:	39 81       	ldd	r19, Y+1	; 0x01
 46a:	3f 5f       	subi	r19, 0xFF	; 255
 46c:	39 83       	std	Y+1, r19	; 0x01
 46e:	33 30       	cpi	r19, 0x03	; 3
 470:	f1 f6       	brne	.-68     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 472:	01 c0       	rjmp	.+2      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 474:	69 84       	ldd	r6, Y+9	; 0x09
		if (fabs(app) < fabs(input[l][k])) {
			app = input[l][k];
			lindex = l;
		}

		USART_Transmit('j');
 476:	8a e6       	ldi	r24, 0x6A	; 106
 478:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
 47c:	8f ef       	ldi	r24, 0xFF	; 255
 47e:	9f e7       	ldi	r25, 0x7F	; 127
 480:	a4 e0       	ldi	r26, 0x04	; 4
 482:	81 50       	subi	r24, 0x01	; 1
 484:	90 40       	sbci	r25, 0x00	; 0
 486:	a0 40       	sbci	r26, 0x00	; 0
 488:	e1 f7       	brne	.-8      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 48a:	00 c0       	rjmp	.+0      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 48c:	00 00       	nop
		_delay_ms(100);
		for (j = 0; j <= sizeOfMatrix; j = j+1)
		{
			temp[j] = input[lindex][j];
 48e:	86 2d       	mov	r24, r6
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	88 0f       	add	r24, r24
 494:	99 1f       	adc	r25, r25
 496:	f2 01       	movw	r30, r4
 498:	e8 0f       	add	r30, r24
 49a:	f9 1f       	adc	r31, r25
 49c:	60 81       	ld	r22, Z
 49e:	71 81       	ldd	r23, Z+1	; 0x01
 4a0:	ab 88       	ldd	r10, Y+19	; 0x13
 4a2:	bc 88       	ldd	r11, Y+20	; 0x14
 4a4:	fb 01       	movw	r30, r22
 4a6:	0a 87       	std	Y+10, r16	; 0x0a
 4a8:	1b 87       	std	Y+11, r17	; 0x0b
 4aa:	60 5f       	subi	r22, 0xF0	; 240
 4ac:	7f 4f       	sbci	r23, 0xFF	; 255
 4ae:	4a 2d       	mov	r20, r10
 4b0:	5b 2d       	mov	r21, r11
 4b2:	38 01       	movw	r6, r16
 4b4:	ba 82       	std	Y+2, r11	; 0x02
 4b6:	a9 82       	std	Y+1, r10	; 0x01
 4b8:	c0 80       	ld	r12, Z
 4ba:	d1 80       	ldd	r13, Z+1	; 0x01
 4bc:	e2 80       	ldd	r14, Z+2	; 0x02
 4be:	f3 80       	ldd	r15, Z+3	; 0x03
 4c0:	da 01       	movw	r26, r20
 4c2:	cd 92       	st	X+, r12
 4c4:	dd 92       	st	X+, r13
 4c6:	ed 92       	st	X+, r14
 4c8:	fd 92       	st	X+, r15
 4ca:	ad 01       	movw	r20, r26
			input[lindex][j] = input[k][j];
 4cc:	d3 01       	movw	r26, r6
 4ce:	8d 90       	ld	r8, X+
 4d0:	9d 90       	ld	r9, X+
 4d2:	ad 90       	ld	r10, X+
 4d4:	bc 90       	ld	r11, X
 4d6:	13 97       	sbiw	r26, 0x03	; 3
 4d8:	81 92       	st	Z+, r8
 4da:	91 92       	st	Z+, r9
 4dc:	a1 92       	st	Z+, r10
 4de:	b1 92       	st	Z+, r11
			input[k][j] = temp[j];
 4e0:	cd 92       	st	X+, r12
 4e2:	dd 92       	st	X+, r13
 4e4:	ed 92       	st	X+, r14
 4e6:	fd 92       	st	X+, r15
 4e8:	3d 01       	movw	r6, r26
			lindex = l;
		}

		USART_Transmit('j');
		_delay_ms(100);
		for (j = 0; j <= sizeOfMatrix; j = j+1)
 4ea:	6e 17       	cp	r22, r30
 4ec:	7f 07       	cpc	r23, r31
 4ee:	21 f7       	brne	.-56     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4f0:	a9 80       	ldd	r10, Y+1	; 0x01
 4f2:	ba 80       	ldd	r11, Y+2	; 0x02
			input[k][j] = temp[j];
		}

		for (j = 0; j <= sizeOfMatrix; j = j+1)
		{
			temp[j] = Inverse[lindex][j];
 4f4:	ef 85       	ldd	r30, Y+15	; 0x0f
 4f6:	f8 89       	ldd	r31, Y+16	; 0x10
 4f8:	e8 0f       	add	r30, r24
 4fa:	f9 1f       	adc	r31, r25
 4fc:	80 81       	ld	r24, Z
 4fe:	91 81       	ldd	r25, Z+1	; 0x01
 500:	ec 85       	ldd	r30, Y+12	; 0x0c
 502:	fd 85       	ldd	r31, Y+13	; 0x0d
 504:	f8 87       	std	Y+8, r31	; 0x08
 506:	ef 83       	std	Y+7, r30	; 0x07
			Inverse[lindex][j] = Inverse[k][j];
 508:	c0 80       	ld	r12, Z
 50a:	d1 80       	ldd	r13, Z+1	; 0x01
 50c:	fc 01       	movw	r30, r24
 50e:	40 96       	adiw	r24, 0x10	; 16
 510:	76 01       	movw	r14, r12
 512:	35 01       	movw	r6, r10
			input[k][j] = temp[j];
		}

		for (j = 0; j <= sizeOfMatrix; j = j+1)
		{
			temp[j] = Inverse[lindex][j];
 514:	40 81       	ld	r20, Z
 516:	51 81       	ldd	r21, Z+1	; 0x01
 518:	62 81       	ldd	r22, Z+2	; 0x02
 51a:	73 81       	ldd	r23, Z+3	; 0x03
 51c:	d3 01       	movw	r26, r6
 51e:	4d 93       	st	X+, r20
 520:	5d 93       	st	X+, r21
 522:	6d 93       	st	X+, r22
 524:	7d 93       	st	X+, r23
 526:	3d 01       	movw	r6, r26
			Inverse[lindex][j] = Inverse[k][j];
 528:	d7 01       	movw	r26, r14
 52a:	8d 90       	ld	r8, X+
 52c:	9d 90       	ld	r9, X+
 52e:	ad 90       	ld	r10, X+
 530:	bc 90       	ld	r11, X
 532:	13 97       	sbiw	r26, 0x03	; 3
 534:	81 92       	st	Z+, r8
 536:	91 92       	st	Z+, r9
 538:	a1 92       	st	Z+, r10
 53a:	b1 92       	st	Z+, r11
			Inverse[k][j] = temp[j];
 53c:	4d 93       	st	X+, r20
 53e:	5d 93       	st	X+, r21
 540:	6d 93       	st	X+, r22
 542:	7d 93       	st	X+, r23
 544:	7d 01       	movw	r14, r26
			temp[j] = input[lindex][j];
			input[lindex][j] = input[k][j];
			input[k][j] = temp[j];
		}

		for (j = 0; j <= sizeOfMatrix; j = j+1)
 546:	8e 17       	cp	r24, r30
 548:	9f 07       	cpc	r25, r31
 54a:	21 f7       	brne	.-56     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
			Inverse[lindex][j] = Inverse[k][j];
			Inverse[k][j] = temp[j];
		}
		
		
		USART_Transmit('k');
 54c:	8b e6       	ldi	r24, 0x6B	; 107
 54e:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
 552:	bf ef       	ldi	r27, 0xFF	; 255
 554:	ef e7       	ldi	r30, 0x7F	; 127
 556:	f4 e0       	ldi	r31, 0x04	; 4
 558:	b1 50       	subi	r27, 0x01	; 1
 55a:	e0 40       	sbci	r30, 0x00	; 0
 55c:	f0 40       	sbci	r31, 0x00	; 0
 55e:	e1 f7       	brne	.-8      	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 560:	00 c0       	rjmp	.+0      	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 562:	00 00       	nop
		_delay_ms(100);
		
        localVariable = input[k][k];
 564:	ad 81       	ldd	r26, Y+5	; 0x05
 566:	be 81       	ldd	r27, Y+6	; 0x06
 568:	8d 90       	ld	r8, X+
 56a:	9d 90       	ld	r9, X+
 56c:	ad 90       	ld	r10, X+
 56e:	bc 90       	ld	r11, X
 570:	1a 82       	std	Y+2, r1	; 0x02
 572:	19 82       	std	Y+1, r1	; 0x01
 574:	0f 2e       	mov	r0, r31
 576:	f0 e3       	ldi	r31, 0x30	; 48
 578:	7f 2e       	mov	r7, r31
 57a:	f0 2d       	mov	r31, r0
        for (uint8_t j = 0; j<sizeOfMatrix; j = j+1)
        {
			USART_Transmit('q');
 57c:	81 e7       	ldi	r24, 0x71	; 113
 57e:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
			USART_Transmit(j+48);
 582:	87 2d       	mov	r24, r7
 584:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
 588:	ff ef       	ldi	r31, 0xFF	; 255
 58a:	2f e7       	ldi	r18, 0x7F	; 127
 58c:	34 e0       	ldi	r19, 0x04	; 4
 58e:	f1 50       	subi	r31, 0x01	; 1
 590:	20 40       	sbci	r18, 0x00	; 0
 592:	30 40       	sbci	r19, 0x00	; 0
 594:	e1 f7       	brne	.-8      	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
 596:	00 c0       	rjmp	.+0      	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
 598:	00 00       	nop
			_delay_ms(100);
            input[k][j] /= localVariable;
 59a:	a5 01       	movw	r20, r10
 59c:	94 01       	movw	r18, r8
 59e:	d8 01       	movw	r26, r16
 5a0:	6d 91       	ld	r22, X+
 5a2:	7d 91       	ld	r23, X+
 5a4:	8d 91       	ld	r24, X+
 5a6:	9c 91       	ld	r25, X
 5a8:	0e 94 9b 04 	call	0x936	; 0x936 <__divsf3>
 5ac:	f8 01       	movw	r30, r16
 5ae:	61 93       	st	Z+, r22
 5b0:	71 93       	st	Z+, r23
 5b2:	81 93       	st	Z+, r24
 5b4:	91 93       	st	Z+, r25
 5b6:	8f 01       	movw	r16, r30
            Inverse[k][j] /= localVariable;
 5b8:	e9 80       	ldd	r14, Y+1	; 0x01
 5ba:	fa 80       	ldd	r15, Y+2	; 0x02
 5bc:	ec 0c       	add	r14, r12
 5be:	fd 1c       	adc	r15, r13
 5c0:	a5 01       	movw	r20, r10
 5c2:	94 01       	movw	r18, r8
 5c4:	d7 01       	movw	r26, r14
 5c6:	6d 91       	ld	r22, X+
 5c8:	7d 91       	ld	r23, X+
 5ca:	8d 91       	ld	r24, X+
 5cc:	9c 91       	ld	r25, X
 5ce:	0e 94 9b 04 	call	0x936	; 0x936 <__divsf3>
 5d2:	f7 01       	movw	r30, r14
 5d4:	60 83       	st	Z, r22
 5d6:	71 83       	std	Z+1, r23	; 0x01
 5d8:	82 83       	std	Z+2, r24	; 0x02
 5da:	93 83       	std	Z+3, r25	; 0x03
 5dc:	73 94       	inc	r7
 5de:	29 81       	ldd	r18, Y+1	; 0x01
 5e0:	3a 81       	ldd	r19, Y+2	; 0x02
 5e2:	2c 5f       	subi	r18, 0xFC	; 252
 5e4:	3f 4f       	sbci	r19, 0xFF	; 255
 5e6:	3a 83       	std	Y+2, r19	; 0x02
 5e8:	29 83       	std	Y+1, r18	; 0x01
		
		USART_Transmit('k');
		_delay_ms(100);
		
        localVariable = input[k][k];
        for (uint8_t j = 0; j<sizeOfMatrix; j = j+1)
 5ea:	2c 30       	cpi	r18, 0x0C	; 12
 5ec:	31 05       	cpc	r19, r1
 5ee:	31 f6       	brne	.-116    	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
			USART_Transmit(j+48);
			_delay_ms(100);
            input[k][j] /= localVariable;
            Inverse[k][j] /= localVariable;
        }
		USART_Transmit('l');
 5f0:	8c e6       	ldi	r24, 0x6C	; 108
 5f2:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
 5f6:	3f ef       	ldi	r19, 0xFF	; 255
 5f8:	8f e7       	ldi	r24, 0x7F	; 127
 5fa:	94 e0       	ldi	r25, 0x04	; 4
 5fc:	31 50       	subi	r19, 0x01	; 1
 5fe:	80 40       	sbci	r24, 0x00	; 0
 600:	90 40       	sbci	r25, 0x00	; 0
 602:	e1 f7       	brne	.-8      	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
 604:	00 c0       	rjmp	.+0      	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
 606:	00 00       	nop
 608:	c9 8c       	ldd	r12, Y+25	; 0x19
 60a:	da 8c       	ldd	r13, Y+26	; 0x1a
 60c:	af 89       	ldd	r26, Y+23	; 0x17
 60e:	ad 83       	std	Y+5, r26	; 0x05
 610:	b8 8d       	ldd	r27, Y+24	; 0x18
 612:	be 83       	std	Y+6, r27	; 0x06
		_delay_ms(100);
        for (uint8_t m = 0; m<sizeOfMatrix; m = m+1)
 614:	61 2c       	mov	r6, r1
				USART_Transmit('z');
				USART_Transmit(sizeOfMatrix+48);
				_delay_ms(100);
				USART_Transmit(m+48);
				USART_Transmit(n+48);
				USART_Transmit(k+48);
 616:	e9 85       	ldd	r30, Y+9	; 0x09
 618:	e0 5d       	subi	r30, 0xD0	; 208
 61a:	e9 83       	std	Y+1, r30	; 0x01
 61c:	5e 8a       	std	Y+22, r5	; 0x16
 61e:	4d 8a       	std	Y+21, r4	; 0x15
 620:	79 84       	ldd	r7, Y+9	; 0x09
 622:	5e 2e       	mov	r5, r30
        }
		USART_Transmit('l');
		_delay_ms(100);
        for (uint8_t m = 0; m<sizeOfMatrix; m = m+1)
        {
			USART_Transmit('m');
 624:	8d e6       	ldi	r24, 0x6D	; 109
 626:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
 62a:	ff ef       	ldi	r31, 0xFF	; 255
 62c:	2f e7       	ldi	r18, 0x7F	; 127
 62e:	34 e0       	ldi	r19, 0x04	; 4
 630:	f1 50       	subi	r31, 0x01	; 1
 632:	20 40       	sbci	r18, 0x00	; 0
 634:	30 40       	sbci	r19, 0x00	; 0
 636:	e1 f7       	brne	.-8      	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
 638:	00 c0       	rjmp	.+0      	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
 63a:	00 00       	nop
 63c:	0f 2e       	mov	r0, r31
 63e:	f0 e3       	ldi	r31, 0x30	; 48
 640:	8f 2e       	mov	r8, r31
 642:	f0 2d       	mov	r31, r0
 644:	86 0c       	add	r8, r6
			_delay_ms(100);
			USART_Transmit(m+48);
 646:	88 2d       	mov	r24, r8
 648:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
 64c:	8f ef       	ldi	r24, 0xFF	; 255
 64e:	9f e7       	ldi	r25, 0x7F	; 127
 650:	a4 e0       	ldi	r26, 0x04	; 4
 652:	81 50       	subi	r24, 0x01	; 1
 654:	90 40       	sbci	r25, 0x00	; 0
 656:	a0 40       	sbci	r26, 0x00	; 0
 658:	e1 f7       	brne	.-8      	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
 65a:	00 c0       	rjmp	.+0      	; 0x65c <__LOCK_REGION_LENGTH__+0x25c>
 65c:	00 00       	nop
			_delay_ms(100);
			USART_Transmit(m+48);
 65e:	88 2d       	mov	r24, r8
 660:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
 664:	bf ef       	ldi	r27, 0xFF	; 255
 666:	ef e7       	ldi	r30, 0x7F	; 127
 668:	f4 e0       	ldi	r31, 0x04	; 4
 66a:	b1 50       	subi	r27, 0x01	; 1
 66c:	e0 40       	sbci	r30, 0x00	; 0
 66e:	f0 40       	sbci	r31, 0x00	; 0
 670:	e1 f7       	brne	.-8      	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
 672:	00 c0       	rjmp	.+0      	; 0x674 <__LOCK_REGION_LENGTH__+0x274>
 674:	00 00       	nop
			_delay_ms(100);
			USART_Transmit(m+48);
 676:	88 2d       	mov	r24, r8
 678:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
 67c:	2f ef       	ldi	r18, 0xFF	; 255
 67e:	3f e7       	ldi	r19, 0x7F	; 127
 680:	84 e0       	ldi	r24, 0x04	; 4
 682:	21 50       	subi	r18, 0x01	; 1
 684:	30 40       	sbci	r19, 0x00	; 0
 686:	80 40       	sbci	r24, 0x00	; 0
 688:	e1 f7       	brne	.-8      	; 0x682 <__LOCK_REGION_LENGTH__+0x282>
 68a:	00 c0       	rjmp	.+0      	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
 68c:	00 00       	nop
			_delay_ms(100);
            localVariable = input[m][k];
 68e:	ad 81       	ldd	r26, Y+5	; 0x05
 690:	be 81       	ldd	r27, Y+6	; 0x06
 692:	0d 91       	ld	r16, X+
 694:	1d 91       	ld	r17, X+
 696:	be 83       	std	Y+6, r27	; 0x06
 698:	ad 83       	std	Y+5, r26	; 0x05
 69a:	f8 01       	movw	r30, r16
 69c:	e2 0d       	add	r30, r2
 69e:	f3 1d       	adc	r31, r3
 6a0:	80 81       	ld	r24, Z
 6a2:	91 81       	ldd	r25, Z+1	; 0x01
 6a4:	a2 81       	ldd	r26, Z+2	; 0x02
 6a6:	b3 81       	ldd	r27, Z+3	; 0x03
 6a8:	89 83       	std	Y+1, r24	; 0x01
 6aa:	9a 83       	std	Y+2, r25	; 0x02
 6ac:	ab 83       	std	Y+3, r26	; 0x03
 6ae:	bc 83       	std	Y+4, r27	; 0x04
 6b0:	ea 84       	ldd	r14, Y+10	; 0x0a
 6b2:	fb 84       	ldd	r15, Y+11	; 0x0b
 6b4:	1c 8e       	std	Y+28, r1	; 0x1c
 6b6:	1b 8e       	std	Y+27, r1	; 0x1b
 6b8:	0f 2e       	mov	r0, r31
 6ba:	f0 e3       	ldi	r31, 0x30	; 48
 6bc:	9f 2e       	mov	r9, r31
 6be:	f0 2d       	mov	r31, r0
            for (uint8_t n= 0; n<sizeOfMatrix; n = n+1)
            {
				USART_Transmit('z');
 6c0:	8a e7       	ldi	r24, 0x7A	; 122
 6c2:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
				USART_Transmit(sizeOfMatrix+48);
 6c6:	83 e3       	ldi	r24, 0x33	; 51
 6c8:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
 6cc:	bf ef       	ldi	r27, 0xFF	; 255
 6ce:	ef e7       	ldi	r30, 0x7F	; 127
 6d0:	f4 e0       	ldi	r31, 0x04	; 4
 6d2:	b1 50       	subi	r27, 0x01	; 1
 6d4:	e0 40       	sbci	r30, 0x00	; 0
 6d6:	f0 40       	sbci	r31, 0x00	; 0
 6d8:	e1 f7       	brne	.-8      	; 0x6d2 <__LOCK_REGION_LENGTH__+0x2d2>
 6da:	00 c0       	rjmp	.+0      	; 0x6dc <__LOCK_REGION_LENGTH__+0x2dc>
 6dc:	00 00       	nop
				_delay_ms(100);
				USART_Transmit(m+48);
 6de:	88 2d       	mov	r24, r8
 6e0:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
				USART_Transmit(n+48);
 6e4:	89 2d       	mov	r24, r9
 6e6:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
				USART_Transmit(k+48);
 6ea:	85 2d       	mov	r24, r5
 6ec:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
				USART_Transmit('z');
 6f0:	8a e7       	ldi	r24, 0x7A	; 122
 6f2:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
 6f6:	2f ef       	ldi	r18, 0xFF	; 255
 6f8:	3f e7       	ldi	r19, 0x7F	; 127
 6fa:	84 e0       	ldi	r24, 0x04	; 4
 6fc:	21 50       	subi	r18, 0x01	; 1
 6fe:	30 40       	sbci	r19, 0x00	; 0
 700:	80 40       	sbci	r24, 0x00	; 0
 702:	e1 f7       	brne	.-8      	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
 704:	00 c0       	rjmp	.+0      	; 0x706 <__LOCK_REGION_LENGTH__+0x306>
 706:	00 00       	nop
				_delay_ms(100);
                if (m == k){
 708:	76 10       	cpse	r7, r6
 70a:	04 c0       	rjmp	.+8      	; 0x714 <__LOCK_REGION_LENGTH__+0x314>
					USART_Transmit('o');
 70c:	8f e6       	ldi	r24, 0x6F	; 111
 70e:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
                    break;
 712:	59 c0       	rjmp	.+178    	; 0x7c6 <__LOCK_REGION_LENGTH__+0x3c6>
				}
				USART_Transmit('p');
 714:	80 e7       	ldi	r24, 0x70	; 112
 716:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
 71a:	9f ef       	ldi	r25, 0xFF	; 255
 71c:	af e7       	ldi	r26, 0x7F	; 127
 71e:	b4 e0       	ldi	r27, 0x04	; 4
 720:	91 50       	subi	r25, 0x01	; 1
 722:	a0 40       	sbci	r26, 0x00	; 0
 724:	b0 40       	sbci	r27, 0x00	; 0
 726:	e1 f7       	brne	.-8      	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
 728:	00 c0       	rjmp	.+0      	; 0x72a <__LOCK_REGION_LENGTH__+0x32a>
 72a:	00 00       	nop
				_delay_ms(100);
                input[m][n] -= input[k][n] * localVariable;
 72c:	f7 01       	movw	r30, r14
 72e:	21 91       	ld	r18, Z+
 730:	31 91       	ld	r19, Z+
 732:	41 91       	ld	r20, Z+
 734:	51 91       	ld	r21, Z+
 736:	7f 01       	movw	r14, r30
 738:	69 81       	ldd	r22, Y+1	; 0x01
 73a:	7a 81       	ldd	r23, Y+2	; 0x02
 73c:	8b 81       	ldd	r24, Y+3	; 0x03
 73e:	9c 81       	ldd	r25, Y+4	; 0x04
 740:	0e 94 b1 05 	call	0xb62	; 0xb62 <__mulsf3>
 744:	9b 01       	movw	r18, r22
 746:	ac 01       	movw	r20, r24
 748:	d8 01       	movw	r26, r16
 74a:	6d 91       	ld	r22, X+
 74c:	7d 91       	ld	r23, X+
 74e:	8d 91       	ld	r24, X+
 750:	9c 91       	ld	r25, X
 752:	0e 94 29 04 	call	0x852	; 0x852 <__subsf3>
 756:	f8 01       	movw	r30, r16
 758:	61 93       	st	Z+, r22
 75a:	71 93       	st	Z+, r23
 75c:	81 93       	st	Z+, r24
 75e:	91 93       	st	Z+, r25
 760:	8f 01       	movw	r16, r30
                Inverse[m][n] -= Inverse[k][n] * localVariable;
 762:	d6 01       	movw	r26, r12
 764:	ad 90       	ld	r10, X+
 766:	bc 90       	ld	r11, X
 768:	eb 8d       	ldd	r30, Y+27	; 0x1b
 76a:	fc 8d       	ldd	r31, Y+28	; 0x1c
 76c:	ae 0e       	add	r10, r30
 76e:	bf 1e       	adc	r11, r31
 770:	af 81       	ldd	r26, Y+7	; 0x07
 772:	b8 85       	ldd	r27, Y+8	; 0x08
 774:	ed 91       	ld	r30, X+
 776:	fc 91       	ld	r31, X
 778:	2b 8d       	ldd	r18, Y+27	; 0x1b
 77a:	3c 8d       	ldd	r19, Y+28	; 0x1c
 77c:	e2 0f       	add	r30, r18
 77e:	f3 1f       	adc	r31, r19
 780:	20 81       	ld	r18, Z
 782:	31 81       	ldd	r19, Z+1	; 0x01
 784:	42 81       	ldd	r20, Z+2	; 0x02
 786:	53 81       	ldd	r21, Z+3	; 0x03
 788:	69 81       	ldd	r22, Y+1	; 0x01
 78a:	7a 81       	ldd	r23, Y+2	; 0x02
 78c:	8b 81       	ldd	r24, Y+3	; 0x03
 78e:	9c 81       	ldd	r25, Y+4	; 0x04
 790:	0e 94 b1 05 	call	0xb62	; 0xb62 <__mulsf3>
 794:	9b 01       	movw	r18, r22
 796:	ac 01       	movw	r20, r24
 798:	d5 01       	movw	r26, r10
 79a:	6d 91       	ld	r22, X+
 79c:	7d 91       	ld	r23, X+
 79e:	8d 91       	ld	r24, X+
 7a0:	9c 91       	ld	r25, X
 7a2:	0e 94 29 04 	call	0x852	; 0x852 <__subsf3>
 7a6:	f5 01       	movw	r30, r10
 7a8:	60 83       	st	Z, r22
 7aa:	71 83       	std	Z+1, r23	; 0x01
 7ac:	82 83       	std	Z+2, r24	; 0x02
 7ae:	93 83       	std	Z+3, r25	; 0x03
 7b0:	93 94       	inc	r9
 7b2:	2b 8d       	ldd	r18, Y+27	; 0x1b
 7b4:	3c 8d       	ldd	r19, Y+28	; 0x1c
 7b6:	2c 5f       	subi	r18, 0xFC	; 252
 7b8:	3f 4f       	sbci	r19, 0xFF	; 255
 7ba:	3c 8f       	std	Y+28, r19	; 0x1c
 7bc:	2b 8f       	std	Y+27, r18	; 0x1b
			USART_Transmit(m+48);
			_delay_ms(100);
			USART_Transmit(m+48);
			_delay_ms(100);
            localVariable = input[m][k];
            for (uint8_t n= 0; n<sizeOfMatrix; n = n+1)
 7be:	2c 30       	cpi	r18, 0x0C	; 12
 7c0:	31 05       	cpc	r19, r1
 7c2:	09 f0       	breq	.+2      	; 0x7c6 <__LOCK_REGION_LENGTH__+0x3c6>
 7c4:	7d cf       	rjmp	.-262    	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
            input[k][j] /= localVariable;
            Inverse[k][j] /= localVariable;
        }
		USART_Transmit('l');
		_delay_ms(100);
        for (uint8_t m = 0; m<sizeOfMatrix; m = m+1)
 7c6:	63 94       	inc	r6
 7c8:	32 e0       	ldi	r19, 0x02	; 2
 7ca:	c3 0e       	add	r12, r19
 7cc:	d1 1c       	adc	r13, r1
 7ce:	83 e0       	ldi	r24, 0x03	; 3
 7d0:	68 12       	cpse	r6, r24
 7d2:	28 cf       	rjmp	.-432    	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
 7d4:	4d 88       	ldd	r4, Y+21	; 0x15
 7d6:	5e 88       	ldd	r5, Y+22	; 0x16
 7d8:	94 e0       	ldi	r25, 0x04	; 4
 7da:	29 0e       	add	r2, r25
 7dc:	31 1c       	adc	r3, r1
 7de:	ac 85       	ldd	r26, Y+12	; 0x0c
 7e0:	bd 85       	ldd	r27, Y+13	; 0x0d
 7e2:	12 96       	adiw	r26, 0x02	; 2
 7e4:	bd 87       	std	Y+13, r27	; 0x0d
 7e6:	ac 87       	std	Y+12, r26	; 0x0c
            else
                Inverse[i][j] = 0;

	USART_Transmit('e');
	_delay_ms(100);
    for (k = 0; k<sizeOfMatrix; k = k+1)
 7e8:	be 85       	ldd	r27, Y+14	; 0x0e
 7ea:	b9 87       	std	Y+9, r27	; 0x09
 7ec:	b3 30       	cpi	r27, 0x03	; 3
 7ee:	09 f0       	breq	.+2      	; 0x7f2 <__LOCK_REGION_LENGTH__+0x3f2>
 7f0:	f3 cd       	rjmp	.-1050   	; 0x3d8 <main+0x1de>
            }
        }
    }
	
	
	USART_Transmit('f');
 7f2:	86 e6       	ldi	r24, 0x66	; 102
 7f4:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
	
	unsigned char a = (char)TCNT0;
 7f8:	82 b7       	in	r24, 0x32	; 50
	//unsigned char b = (char)TCNT1L;
	unsigned char over = (char)tot_overflow;
 7fa:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
	
    //printf("The inverse matrix is:\n");
	
	
	//USART_TransmitF(Inverse[0][1]);
	USART_Transmit('w');
 7fe:	87 e7       	ldi	r24, 0x77	; 119
 800:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
 804:	ef ef       	ldi	r30, 0xFF	; 255
 806:	ff e7       	ldi	r31, 0x7F	; 127
 808:	24 e0       	ldi	r18, 0x04	; 4
 80a:	e1 50       	subi	r30, 0x01	; 1
 80c:	f0 40       	sbci	r31, 0x00	; 0
 80e:	20 40       	sbci	r18, 0x00	; 0
 810:	e1 f7       	brne	.-8      	; 0x80a <__LOCK_REGION_LENGTH__+0x40a>
 812:	00 c0       	rjmp	.+0      	; 0x814 <__LOCK_REGION_LENGTH__+0x414>
 814:	00 00       	nop
	_delay_ms(100);
	USART_Transmit('w');
 816:	87 e7       	ldi	r24, 0x77	; 119
 818:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
	USART_Transmit('w');
 81c:	87 e7       	ldi	r24, 0x77	; 119
 81e:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
 822:	3f ef       	ldi	r19, 0xFF	; 255
 824:	8f e7       	ldi	r24, 0x7F	; 127
 826:	94 e0       	ldi	r25, 0x04	; 4
 828:	31 50       	subi	r19, 0x01	; 1
 82a:	80 40       	sbci	r24, 0x00	; 0
 82c:	90 40       	sbci	r25, 0x00	; 0
 82e:	e1 f7       	brne	.-8      	; 0x828 <__LOCK_REGION_LENGTH__+0x428>
 830:	00 c0       	rjmp	.+0      	; 0x832 <__LOCK_REGION_LENGTH__+0x432>
 832:	00 00       	nop
	_delay_ms(100);
	USART_Transmit('w');
 834:	87 e7       	ldi	r24, 0x77	; 119
 836:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
		USART_Transmit(over);
		USART_Transmit((char)tot_overflow);
		*/
		//USART_TransmitF(-0.07938568);
		
		float s = Inverse[1][1];
 83a:	af 85       	ldd	r26, Y+15	; 0x0f
 83c:	b8 89       	ldd	r27, Y+16	; 0x10
 83e:	12 96       	adiw	r26, 0x02	; 2
 840:	ed 91       	ld	r30, X+
 842:	fc 91       	ld	r31, X
 844:	13 97       	sbiw	r26, 0x03	; 3
		USART_TransmitF(s);
 846:	64 81       	ldd	r22, Z+4	; 0x04
 848:	75 81       	ldd	r23, Z+5	; 0x05
 84a:	86 81       	ldd	r24, Z+6	; 0x06
 84c:	97 81       	ldd	r25, Z+7	; 0x07
 84e:	0e 94 54 00 	call	0xa8	; 0xa8 <USART_TransmitF>

00000852 <__subsf3>:
 852:	50 58       	subi	r21, 0x80	; 128

00000854 <__addsf3>:
 854:	bb 27       	eor	r27, r27
 856:	aa 27       	eor	r26, r26
 858:	0e 94 41 04 	call	0x882	; 0x882 <__addsf3x>
 85c:	0c 94 77 05 	jmp	0xaee	; 0xaee <__fp_round>
 860:	0e 94 69 05 	call	0xad2	; 0xad2 <__fp_pscA>
 864:	38 f0       	brcs	.+14     	; 0x874 <__stack+0x15>
 866:	0e 94 70 05 	call	0xae0	; 0xae0 <__fp_pscB>
 86a:	20 f0       	brcs	.+8      	; 0x874 <__stack+0x15>
 86c:	39 f4       	brne	.+14     	; 0x87c <__stack+0x1d>
 86e:	9f 3f       	cpi	r25, 0xFF	; 255
 870:	19 f4       	brne	.+6      	; 0x878 <__stack+0x19>
 872:	26 f4       	brtc	.+8      	; 0x87c <__stack+0x1d>
 874:	0c 94 66 05 	jmp	0xacc	; 0xacc <__fp_nan>
 878:	0e f4       	brtc	.+2      	; 0x87c <__stack+0x1d>
 87a:	e0 95       	com	r30
 87c:	e7 fb       	bst	r30, 7
 87e:	0c 94 60 05 	jmp	0xac0	; 0xac0 <__fp_inf>

00000882 <__addsf3x>:
 882:	e9 2f       	mov	r30, r25
 884:	0e 94 88 05 	call	0xb10	; 0xb10 <__fp_split3>
 888:	58 f3       	brcs	.-42     	; 0x860 <__stack+0x1>
 88a:	ba 17       	cp	r27, r26
 88c:	62 07       	cpc	r22, r18
 88e:	73 07       	cpc	r23, r19
 890:	84 07       	cpc	r24, r20
 892:	95 07       	cpc	r25, r21
 894:	20 f0       	brcs	.+8      	; 0x89e <__addsf3x+0x1c>
 896:	79 f4       	brne	.+30     	; 0x8b6 <__addsf3x+0x34>
 898:	a6 f5       	brtc	.+104    	; 0x902 <__addsf3x+0x80>
 89a:	0c 94 aa 05 	jmp	0xb54	; 0xb54 <__fp_zero>
 89e:	0e f4       	brtc	.+2      	; 0x8a2 <__addsf3x+0x20>
 8a0:	e0 95       	com	r30
 8a2:	0b 2e       	mov	r0, r27
 8a4:	ba 2f       	mov	r27, r26
 8a6:	a0 2d       	mov	r26, r0
 8a8:	0b 01       	movw	r0, r22
 8aa:	b9 01       	movw	r22, r18
 8ac:	90 01       	movw	r18, r0
 8ae:	0c 01       	movw	r0, r24
 8b0:	ca 01       	movw	r24, r20
 8b2:	a0 01       	movw	r20, r0
 8b4:	11 24       	eor	r1, r1
 8b6:	ff 27       	eor	r31, r31
 8b8:	59 1b       	sub	r21, r25
 8ba:	99 f0       	breq	.+38     	; 0x8e2 <__addsf3x+0x60>
 8bc:	59 3f       	cpi	r21, 0xF9	; 249
 8be:	50 f4       	brcc	.+20     	; 0x8d4 <__addsf3x+0x52>
 8c0:	50 3e       	cpi	r21, 0xE0	; 224
 8c2:	68 f1       	brcs	.+90     	; 0x91e <__addsf3x+0x9c>
 8c4:	1a 16       	cp	r1, r26
 8c6:	f0 40       	sbci	r31, 0x00	; 0
 8c8:	a2 2f       	mov	r26, r18
 8ca:	23 2f       	mov	r18, r19
 8cc:	34 2f       	mov	r19, r20
 8ce:	44 27       	eor	r20, r20
 8d0:	58 5f       	subi	r21, 0xF8	; 248
 8d2:	f3 cf       	rjmp	.-26     	; 0x8ba <__addsf3x+0x38>
 8d4:	46 95       	lsr	r20
 8d6:	37 95       	ror	r19
 8d8:	27 95       	ror	r18
 8da:	a7 95       	ror	r26
 8dc:	f0 40       	sbci	r31, 0x00	; 0
 8de:	53 95       	inc	r21
 8e0:	c9 f7       	brne	.-14     	; 0x8d4 <__addsf3x+0x52>
 8e2:	7e f4       	brtc	.+30     	; 0x902 <__addsf3x+0x80>
 8e4:	1f 16       	cp	r1, r31
 8e6:	ba 0b       	sbc	r27, r26
 8e8:	62 0b       	sbc	r22, r18
 8ea:	73 0b       	sbc	r23, r19
 8ec:	84 0b       	sbc	r24, r20
 8ee:	ba f0       	brmi	.+46     	; 0x91e <__addsf3x+0x9c>
 8f0:	91 50       	subi	r25, 0x01	; 1
 8f2:	a1 f0       	breq	.+40     	; 0x91c <__addsf3x+0x9a>
 8f4:	ff 0f       	add	r31, r31
 8f6:	bb 1f       	adc	r27, r27
 8f8:	66 1f       	adc	r22, r22
 8fa:	77 1f       	adc	r23, r23
 8fc:	88 1f       	adc	r24, r24
 8fe:	c2 f7       	brpl	.-16     	; 0x8f0 <__addsf3x+0x6e>
 900:	0e c0       	rjmp	.+28     	; 0x91e <__addsf3x+0x9c>
 902:	ba 0f       	add	r27, r26
 904:	62 1f       	adc	r22, r18
 906:	73 1f       	adc	r23, r19
 908:	84 1f       	adc	r24, r20
 90a:	48 f4       	brcc	.+18     	; 0x91e <__addsf3x+0x9c>
 90c:	87 95       	ror	r24
 90e:	77 95       	ror	r23
 910:	67 95       	ror	r22
 912:	b7 95       	ror	r27
 914:	f7 95       	ror	r31
 916:	9e 3f       	cpi	r25, 0xFE	; 254
 918:	08 f0       	brcs	.+2      	; 0x91c <__addsf3x+0x9a>
 91a:	b0 cf       	rjmp	.-160    	; 0x87c <__stack+0x1d>
 91c:	93 95       	inc	r25
 91e:	88 0f       	add	r24, r24
 920:	08 f0       	brcs	.+2      	; 0x924 <__addsf3x+0xa2>
 922:	99 27       	eor	r25, r25
 924:	ee 0f       	add	r30, r30
 926:	97 95       	ror	r25
 928:	87 95       	ror	r24
 92a:	08 95       	ret

0000092c <__cmpsf2>:
 92c:	0e 94 3c 05 	call	0xa78	; 0xa78 <__fp_cmp>
 930:	08 f4       	brcc	.+2      	; 0x934 <__cmpsf2+0x8>
 932:	81 e0       	ldi	r24, 0x01	; 1
 934:	08 95       	ret

00000936 <__divsf3>:
 936:	0e 94 af 04 	call	0x95e	; 0x95e <__divsf3x>
 93a:	0c 94 77 05 	jmp	0xaee	; 0xaee <__fp_round>
 93e:	0e 94 70 05 	call	0xae0	; 0xae0 <__fp_pscB>
 942:	58 f0       	brcs	.+22     	; 0x95a <__divsf3+0x24>
 944:	0e 94 69 05 	call	0xad2	; 0xad2 <__fp_pscA>
 948:	40 f0       	brcs	.+16     	; 0x95a <__divsf3+0x24>
 94a:	29 f4       	brne	.+10     	; 0x956 <__divsf3+0x20>
 94c:	5f 3f       	cpi	r21, 0xFF	; 255
 94e:	29 f0       	breq	.+10     	; 0x95a <__divsf3+0x24>
 950:	0c 94 60 05 	jmp	0xac0	; 0xac0 <__fp_inf>
 954:	51 11       	cpse	r21, r1
 956:	0c 94 ab 05 	jmp	0xb56	; 0xb56 <__fp_szero>
 95a:	0c 94 66 05 	jmp	0xacc	; 0xacc <__fp_nan>

0000095e <__divsf3x>:
 95e:	0e 94 88 05 	call	0xb10	; 0xb10 <__fp_split3>
 962:	68 f3       	brcs	.-38     	; 0x93e <__divsf3+0x8>

00000964 <__divsf3_pse>:
 964:	99 23       	and	r25, r25
 966:	b1 f3       	breq	.-20     	; 0x954 <__divsf3+0x1e>
 968:	55 23       	and	r21, r21
 96a:	91 f3       	breq	.-28     	; 0x950 <__divsf3+0x1a>
 96c:	95 1b       	sub	r25, r21
 96e:	55 0b       	sbc	r21, r21
 970:	bb 27       	eor	r27, r27
 972:	aa 27       	eor	r26, r26
 974:	62 17       	cp	r22, r18
 976:	73 07       	cpc	r23, r19
 978:	84 07       	cpc	r24, r20
 97a:	38 f0       	brcs	.+14     	; 0x98a <__divsf3_pse+0x26>
 97c:	9f 5f       	subi	r25, 0xFF	; 255
 97e:	5f 4f       	sbci	r21, 0xFF	; 255
 980:	22 0f       	add	r18, r18
 982:	33 1f       	adc	r19, r19
 984:	44 1f       	adc	r20, r20
 986:	aa 1f       	adc	r26, r26
 988:	a9 f3       	breq	.-22     	; 0x974 <__divsf3_pse+0x10>
 98a:	35 d0       	rcall	.+106    	; 0x9f6 <__divsf3_pse+0x92>
 98c:	0e 2e       	mov	r0, r30
 98e:	3a f0       	brmi	.+14     	; 0x99e <__divsf3_pse+0x3a>
 990:	e0 e8       	ldi	r30, 0x80	; 128
 992:	32 d0       	rcall	.+100    	; 0x9f8 <__divsf3_pse+0x94>
 994:	91 50       	subi	r25, 0x01	; 1
 996:	50 40       	sbci	r21, 0x00	; 0
 998:	e6 95       	lsr	r30
 99a:	00 1c       	adc	r0, r0
 99c:	ca f7       	brpl	.-14     	; 0x990 <__divsf3_pse+0x2c>
 99e:	2b d0       	rcall	.+86     	; 0x9f6 <__divsf3_pse+0x92>
 9a0:	fe 2f       	mov	r31, r30
 9a2:	29 d0       	rcall	.+82     	; 0x9f6 <__divsf3_pse+0x92>
 9a4:	66 0f       	add	r22, r22
 9a6:	77 1f       	adc	r23, r23
 9a8:	88 1f       	adc	r24, r24
 9aa:	bb 1f       	adc	r27, r27
 9ac:	26 17       	cp	r18, r22
 9ae:	37 07       	cpc	r19, r23
 9b0:	48 07       	cpc	r20, r24
 9b2:	ab 07       	cpc	r26, r27
 9b4:	b0 e8       	ldi	r27, 0x80	; 128
 9b6:	09 f0       	breq	.+2      	; 0x9ba <__divsf3_pse+0x56>
 9b8:	bb 0b       	sbc	r27, r27
 9ba:	80 2d       	mov	r24, r0
 9bc:	bf 01       	movw	r22, r30
 9be:	ff 27       	eor	r31, r31
 9c0:	93 58       	subi	r25, 0x83	; 131
 9c2:	5f 4f       	sbci	r21, 0xFF	; 255
 9c4:	3a f0       	brmi	.+14     	; 0x9d4 <__divsf3_pse+0x70>
 9c6:	9e 3f       	cpi	r25, 0xFE	; 254
 9c8:	51 05       	cpc	r21, r1
 9ca:	78 f0       	brcs	.+30     	; 0x9ea <__divsf3_pse+0x86>
 9cc:	0c 94 60 05 	jmp	0xac0	; 0xac0 <__fp_inf>
 9d0:	0c 94 ab 05 	jmp	0xb56	; 0xb56 <__fp_szero>
 9d4:	5f 3f       	cpi	r21, 0xFF	; 255
 9d6:	e4 f3       	brlt	.-8      	; 0x9d0 <__divsf3_pse+0x6c>
 9d8:	98 3e       	cpi	r25, 0xE8	; 232
 9da:	d4 f3       	brlt	.-12     	; 0x9d0 <__divsf3_pse+0x6c>
 9dc:	86 95       	lsr	r24
 9de:	77 95       	ror	r23
 9e0:	67 95       	ror	r22
 9e2:	b7 95       	ror	r27
 9e4:	f7 95       	ror	r31
 9e6:	9f 5f       	subi	r25, 0xFF	; 255
 9e8:	c9 f7       	brne	.-14     	; 0x9dc <__divsf3_pse+0x78>
 9ea:	88 0f       	add	r24, r24
 9ec:	91 1d       	adc	r25, r1
 9ee:	96 95       	lsr	r25
 9f0:	87 95       	ror	r24
 9f2:	97 f9       	bld	r25, 7
 9f4:	08 95       	ret
 9f6:	e1 e0       	ldi	r30, 0x01	; 1
 9f8:	66 0f       	add	r22, r22
 9fa:	77 1f       	adc	r23, r23
 9fc:	88 1f       	adc	r24, r24
 9fe:	bb 1f       	adc	r27, r27
 a00:	62 17       	cp	r22, r18
 a02:	73 07       	cpc	r23, r19
 a04:	84 07       	cpc	r24, r20
 a06:	ba 07       	cpc	r27, r26
 a08:	20 f0       	brcs	.+8      	; 0xa12 <__divsf3_pse+0xae>
 a0a:	62 1b       	sub	r22, r18
 a0c:	73 0b       	sbc	r23, r19
 a0e:	84 0b       	sbc	r24, r20
 a10:	ba 0b       	sbc	r27, r26
 a12:	ee 1f       	adc	r30, r30
 a14:	88 f7       	brcc	.-30     	; 0x9f8 <__divsf3_pse+0x94>
 a16:	e0 95       	com	r30
 a18:	08 95       	ret

00000a1a <__fixunssfsi>:
 a1a:	0e 94 90 05 	call	0xb20	; 0xb20 <__fp_splitA>
 a1e:	88 f0       	brcs	.+34     	; 0xa42 <__fixunssfsi+0x28>
 a20:	9f 57       	subi	r25, 0x7F	; 127
 a22:	98 f0       	brcs	.+38     	; 0xa4a <__fixunssfsi+0x30>
 a24:	b9 2f       	mov	r27, r25
 a26:	99 27       	eor	r25, r25
 a28:	b7 51       	subi	r27, 0x17	; 23
 a2a:	b0 f0       	brcs	.+44     	; 0xa58 <__fixunssfsi+0x3e>
 a2c:	e1 f0       	breq	.+56     	; 0xa66 <__fixunssfsi+0x4c>
 a2e:	66 0f       	add	r22, r22
 a30:	77 1f       	adc	r23, r23
 a32:	88 1f       	adc	r24, r24
 a34:	99 1f       	adc	r25, r25
 a36:	1a f0       	brmi	.+6      	; 0xa3e <__fixunssfsi+0x24>
 a38:	ba 95       	dec	r27
 a3a:	c9 f7       	brne	.-14     	; 0xa2e <__fixunssfsi+0x14>
 a3c:	14 c0       	rjmp	.+40     	; 0xa66 <__fixunssfsi+0x4c>
 a3e:	b1 30       	cpi	r27, 0x01	; 1
 a40:	91 f0       	breq	.+36     	; 0xa66 <__fixunssfsi+0x4c>
 a42:	0e 94 aa 05 	call	0xb54	; 0xb54 <__fp_zero>
 a46:	b1 e0       	ldi	r27, 0x01	; 1
 a48:	08 95       	ret
 a4a:	0c 94 aa 05 	jmp	0xb54	; 0xb54 <__fp_zero>
 a4e:	67 2f       	mov	r22, r23
 a50:	78 2f       	mov	r23, r24
 a52:	88 27       	eor	r24, r24
 a54:	b8 5f       	subi	r27, 0xF8	; 248
 a56:	39 f0       	breq	.+14     	; 0xa66 <__fixunssfsi+0x4c>
 a58:	b9 3f       	cpi	r27, 0xF9	; 249
 a5a:	cc f3       	brlt	.-14     	; 0xa4e <__fixunssfsi+0x34>
 a5c:	86 95       	lsr	r24
 a5e:	77 95       	ror	r23
 a60:	67 95       	ror	r22
 a62:	b3 95       	inc	r27
 a64:	d9 f7       	brne	.-10     	; 0xa5c <__fixunssfsi+0x42>
 a66:	3e f4       	brtc	.+14     	; 0xa76 <__fixunssfsi+0x5c>
 a68:	90 95       	com	r25
 a6a:	80 95       	com	r24
 a6c:	70 95       	com	r23
 a6e:	61 95       	neg	r22
 a70:	7f 4f       	sbci	r23, 0xFF	; 255
 a72:	8f 4f       	sbci	r24, 0xFF	; 255
 a74:	9f 4f       	sbci	r25, 0xFF	; 255
 a76:	08 95       	ret

00000a78 <__fp_cmp>:
 a78:	99 0f       	add	r25, r25
 a7a:	00 08       	sbc	r0, r0
 a7c:	55 0f       	add	r21, r21
 a7e:	aa 0b       	sbc	r26, r26
 a80:	e0 e8       	ldi	r30, 0x80	; 128
 a82:	fe ef       	ldi	r31, 0xFE	; 254
 a84:	16 16       	cp	r1, r22
 a86:	17 06       	cpc	r1, r23
 a88:	e8 07       	cpc	r30, r24
 a8a:	f9 07       	cpc	r31, r25
 a8c:	c0 f0       	brcs	.+48     	; 0xabe <__fp_cmp+0x46>
 a8e:	12 16       	cp	r1, r18
 a90:	13 06       	cpc	r1, r19
 a92:	e4 07       	cpc	r30, r20
 a94:	f5 07       	cpc	r31, r21
 a96:	98 f0       	brcs	.+38     	; 0xabe <__fp_cmp+0x46>
 a98:	62 1b       	sub	r22, r18
 a9a:	73 0b       	sbc	r23, r19
 a9c:	84 0b       	sbc	r24, r20
 a9e:	95 0b       	sbc	r25, r21
 aa0:	39 f4       	brne	.+14     	; 0xab0 <__fp_cmp+0x38>
 aa2:	0a 26       	eor	r0, r26
 aa4:	61 f0       	breq	.+24     	; 0xabe <__fp_cmp+0x46>
 aa6:	23 2b       	or	r18, r19
 aa8:	24 2b       	or	r18, r20
 aaa:	25 2b       	or	r18, r21
 aac:	21 f4       	brne	.+8      	; 0xab6 <__fp_cmp+0x3e>
 aae:	08 95       	ret
 ab0:	0a 26       	eor	r0, r26
 ab2:	09 f4       	brne	.+2      	; 0xab6 <__fp_cmp+0x3e>
 ab4:	a1 40       	sbci	r26, 0x01	; 1
 ab6:	a6 95       	lsr	r26
 ab8:	8f ef       	ldi	r24, 0xFF	; 255
 aba:	81 1d       	adc	r24, r1
 abc:	81 1d       	adc	r24, r1
 abe:	08 95       	ret

00000ac0 <__fp_inf>:
 ac0:	97 f9       	bld	r25, 7
 ac2:	9f 67       	ori	r25, 0x7F	; 127
 ac4:	80 e8       	ldi	r24, 0x80	; 128
 ac6:	70 e0       	ldi	r23, 0x00	; 0
 ac8:	60 e0       	ldi	r22, 0x00	; 0
 aca:	08 95       	ret

00000acc <__fp_nan>:
 acc:	9f ef       	ldi	r25, 0xFF	; 255
 ace:	80 ec       	ldi	r24, 0xC0	; 192
 ad0:	08 95       	ret

00000ad2 <__fp_pscA>:
 ad2:	00 24       	eor	r0, r0
 ad4:	0a 94       	dec	r0
 ad6:	16 16       	cp	r1, r22
 ad8:	17 06       	cpc	r1, r23
 ada:	18 06       	cpc	r1, r24
 adc:	09 06       	cpc	r0, r25
 ade:	08 95       	ret

00000ae0 <__fp_pscB>:
 ae0:	00 24       	eor	r0, r0
 ae2:	0a 94       	dec	r0
 ae4:	12 16       	cp	r1, r18
 ae6:	13 06       	cpc	r1, r19
 ae8:	14 06       	cpc	r1, r20
 aea:	05 06       	cpc	r0, r21
 aec:	08 95       	ret

00000aee <__fp_round>:
 aee:	09 2e       	mov	r0, r25
 af0:	03 94       	inc	r0
 af2:	00 0c       	add	r0, r0
 af4:	11 f4       	brne	.+4      	; 0xafa <__fp_round+0xc>
 af6:	88 23       	and	r24, r24
 af8:	52 f0       	brmi	.+20     	; 0xb0e <__fp_round+0x20>
 afa:	bb 0f       	add	r27, r27
 afc:	40 f4       	brcc	.+16     	; 0xb0e <__fp_round+0x20>
 afe:	bf 2b       	or	r27, r31
 b00:	11 f4       	brne	.+4      	; 0xb06 <__fp_round+0x18>
 b02:	60 ff       	sbrs	r22, 0
 b04:	04 c0       	rjmp	.+8      	; 0xb0e <__fp_round+0x20>
 b06:	6f 5f       	subi	r22, 0xFF	; 255
 b08:	7f 4f       	sbci	r23, 0xFF	; 255
 b0a:	8f 4f       	sbci	r24, 0xFF	; 255
 b0c:	9f 4f       	sbci	r25, 0xFF	; 255
 b0e:	08 95       	ret

00000b10 <__fp_split3>:
 b10:	57 fd       	sbrc	r21, 7
 b12:	90 58       	subi	r25, 0x80	; 128
 b14:	44 0f       	add	r20, r20
 b16:	55 1f       	adc	r21, r21
 b18:	59 f0       	breq	.+22     	; 0xb30 <__fp_splitA+0x10>
 b1a:	5f 3f       	cpi	r21, 0xFF	; 255
 b1c:	71 f0       	breq	.+28     	; 0xb3a <__fp_splitA+0x1a>
 b1e:	47 95       	ror	r20

00000b20 <__fp_splitA>:
 b20:	88 0f       	add	r24, r24
 b22:	97 fb       	bst	r25, 7
 b24:	99 1f       	adc	r25, r25
 b26:	61 f0       	breq	.+24     	; 0xb40 <__fp_splitA+0x20>
 b28:	9f 3f       	cpi	r25, 0xFF	; 255
 b2a:	79 f0       	breq	.+30     	; 0xb4a <__fp_splitA+0x2a>
 b2c:	87 95       	ror	r24
 b2e:	08 95       	ret
 b30:	12 16       	cp	r1, r18
 b32:	13 06       	cpc	r1, r19
 b34:	14 06       	cpc	r1, r20
 b36:	55 1f       	adc	r21, r21
 b38:	f2 cf       	rjmp	.-28     	; 0xb1e <__fp_split3+0xe>
 b3a:	46 95       	lsr	r20
 b3c:	f1 df       	rcall	.-30     	; 0xb20 <__fp_splitA>
 b3e:	08 c0       	rjmp	.+16     	; 0xb50 <__fp_splitA+0x30>
 b40:	16 16       	cp	r1, r22
 b42:	17 06       	cpc	r1, r23
 b44:	18 06       	cpc	r1, r24
 b46:	99 1f       	adc	r25, r25
 b48:	f1 cf       	rjmp	.-30     	; 0xb2c <__fp_splitA+0xc>
 b4a:	86 95       	lsr	r24
 b4c:	71 05       	cpc	r23, r1
 b4e:	61 05       	cpc	r22, r1
 b50:	08 94       	sec
 b52:	08 95       	ret

00000b54 <__fp_zero>:
 b54:	e8 94       	clt

00000b56 <__fp_szero>:
 b56:	bb 27       	eor	r27, r27
 b58:	66 27       	eor	r22, r22
 b5a:	77 27       	eor	r23, r23
 b5c:	cb 01       	movw	r24, r22
 b5e:	97 f9       	bld	r25, 7
 b60:	08 95       	ret

00000b62 <__mulsf3>:
 b62:	0e 94 c4 05 	call	0xb88	; 0xb88 <__mulsf3x>
 b66:	0c 94 77 05 	jmp	0xaee	; 0xaee <__fp_round>
 b6a:	0e 94 69 05 	call	0xad2	; 0xad2 <__fp_pscA>
 b6e:	38 f0       	brcs	.+14     	; 0xb7e <__mulsf3+0x1c>
 b70:	0e 94 70 05 	call	0xae0	; 0xae0 <__fp_pscB>
 b74:	20 f0       	brcs	.+8      	; 0xb7e <__mulsf3+0x1c>
 b76:	95 23       	and	r25, r21
 b78:	11 f0       	breq	.+4      	; 0xb7e <__mulsf3+0x1c>
 b7a:	0c 94 60 05 	jmp	0xac0	; 0xac0 <__fp_inf>
 b7e:	0c 94 66 05 	jmp	0xacc	; 0xacc <__fp_nan>
 b82:	11 24       	eor	r1, r1
 b84:	0c 94 ab 05 	jmp	0xb56	; 0xb56 <__fp_szero>

00000b88 <__mulsf3x>:
 b88:	0e 94 88 05 	call	0xb10	; 0xb10 <__fp_split3>
 b8c:	70 f3       	brcs	.-36     	; 0xb6a <__mulsf3+0x8>

00000b8e <__mulsf3_pse>:
 b8e:	95 9f       	mul	r25, r21
 b90:	c1 f3       	breq	.-16     	; 0xb82 <__mulsf3+0x20>
 b92:	95 0f       	add	r25, r21
 b94:	50 e0       	ldi	r21, 0x00	; 0
 b96:	55 1f       	adc	r21, r21
 b98:	62 9f       	mul	r22, r18
 b9a:	f0 01       	movw	r30, r0
 b9c:	72 9f       	mul	r23, r18
 b9e:	bb 27       	eor	r27, r27
 ba0:	f0 0d       	add	r31, r0
 ba2:	b1 1d       	adc	r27, r1
 ba4:	63 9f       	mul	r22, r19
 ba6:	aa 27       	eor	r26, r26
 ba8:	f0 0d       	add	r31, r0
 baa:	b1 1d       	adc	r27, r1
 bac:	aa 1f       	adc	r26, r26
 bae:	64 9f       	mul	r22, r20
 bb0:	66 27       	eor	r22, r22
 bb2:	b0 0d       	add	r27, r0
 bb4:	a1 1d       	adc	r26, r1
 bb6:	66 1f       	adc	r22, r22
 bb8:	82 9f       	mul	r24, r18
 bba:	22 27       	eor	r18, r18
 bbc:	b0 0d       	add	r27, r0
 bbe:	a1 1d       	adc	r26, r1
 bc0:	62 1f       	adc	r22, r18
 bc2:	73 9f       	mul	r23, r19
 bc4:	b0 0d       	add	r27, r0
 bc6:	a1 1d       	adc	r26, r1
 bc8:	62 1f       	adc	r22, r18
 bca:	83 9f       	mul	r24, r19
 bcc:	a0 0d       	add	r26, r0
 bce:	61 1d       	adc	r22, r1
 bd0:	22 1f       	adc	r18, r18
 bd2:	74 9f       	mul	r23, r20
 bd4:	33 27       	eor	r19, r19
 bd6:	a0 0d       	add	r26, r0
 bd8:	61 1d       	adc	r22, r1
 bda:	23 1f       	adc	r18, r19
 bdc:	84 9f       	mul	r24, r20
 bde:	60 0d       	add	r22, r0
 be0:	21 1d       	adc	r18, r1
 be2:	82 2f       	mov	r24, r18
 be4:	76 2f       	mov	r23, r22
 be6:	6a 2f       	mov	r22, r26
 be8:	11 24       	eor	r1, r1
 bea:	9f 57       	subi	r25, 0x7F	; 127
 bec:	50 40       	sbci	r21, 0x00	; 0
 bee:	9a f0       	brmi	.+38     	; 0xc16 <__mulsf3_pse+0x88>
 bf0:	f1 f0       	breq	.+60     	; 0xc2e <__mulsf3_pse+0xa0>
 bf2:	88 23       	and	r24, r24
 bf4:	4a f0       	brmi	.+18     	; 0xc08 <__mulsf3_pse+0x7a>
 bf6:	ee 0f       	add	r30, r30
 bf8:	ff 1f       	adc	r31, r31
 bfa:	bb 1f       	adc	r27, r27
 bfc:	66 1f       	adc	r22, r22
 bfe:	77 1f       	adc	r23, r23
 c00:	88 1f       	adc	r24, r24
 c02:	91 50       	subi	r25, 0x01	; 1
 c04:	50 40       	sbci	r21, 0x00	; 0
 c06:	a9 f7       	brne	.-22     	; 0xbf2 <__mulsf3_pse+0x64>
 c08:	9e 3f       	cpi	r25, 0xFE	; 254
 c0a:	51 05       	cpc	r21, r1
 c0c:	80 f0       	brcs	.+32     	; 0xc2e <__mulsf3_pse+0xa0>
 c0e:	0c 94 60 05 	jmp	0xac0	; 0xac0 <__fp_inf>
 c12:	0c 94 ab 05 	jmp	0xb56	; 0xb56 <__fp_szero>
 c16:	5f 3f       	cpi	r21, 0xFF	; 255
 c18:	e4 f3       	brlt	.-8      	; 0xc12 <__mulsf3_pse+0x84>
 c1a:	98 3e       	cpi	r25, 0xE8	; 232
 c1c:	d4 f3       	brlt	.-12     	; 0xc12 <__mulsf3_pse+0x84>
 c1e:	86 95       	lsr	r24
 c20:	77 95       	ror	r23
 c22:	67 95       	ror	r22
 c24:	b7 95       	ror	r27
 c26:	f7 95       	ror	r31
 c28:	e7 95       	ror	r30
 c2a:	9f 5f       	subi	r25, 0xFF	; 255
 c2c:	c1 f7       	brne	.-16     	; 0xc1e <__mulsf3_pse+0x90>
 c2e:	fe 2b       	or	r31, r30
 c30:	88 0f       	add	r24, r24
 c32:	91 1d       	adc	r25, r1
 c34:	96 95       	lsr	r25
 c36:	87 95       	ror	r24
 c38:	97 f9       	bld	r25, 7
 c3a:	08 95       	ret

00000c3c <__udivmodsi4>:
 c3c:	a1 e2       	ldi	r26, 0x21	; 33
 c3e:	1a 2e       	mov	r1, r26
 c40:	aa 1b       	sub	r26, r26
 c42:	bb 1b       	sub	r27, r27
 c44:	fd 01       	movw	r30, r26
 c46:	0d c0       	rjmp	.+26     	; 0xc62 <__udivmodsi4_ep>

00000c48 <__udivmodsi4_loop>:
 c48:	aa 1f       	adc	r26, r26
 c4a:	bb 1f       	adc	r27, r27
 c4c:	ee 1f       	adc	r30, r30
 c4e:	ff 1f       	adc	r31, r31
 c50:	a2 17       	cp	r26, r18
 c52:	b3 07       	cpc	r27, r19
 c54:	e4 07       	cpc	r30, r20
 c56:	f5 07       	cpc	r31, r21
 c58:	20 f0       	brcs	.+8      	; 0xc62 <__udivmodsi4_ep>
 c5a:	a2 1b       	sub	r26, r18
 c5c:	b3 0b       	sbc	r27, r19
 c5e:	e4 0b       	sbc	r30, r20
 c60:	f5 0b       	sbc	r31, r21

00000c62 <__udivmodsi4_ep>:
 c62:	66 1f       	adc	r22, r22
 c64:	77 1f       	adc	r23, r23
 c66:	88 1f       	adc	r24, r24
 c68:	99 1f       	adc	r25, r25
 c6a:	1a 94       	dec	r1
 c6c:	69 f7       	brne	.-38     	; 0xc48 <__udivmodsi4_loop>
 c6e:	60 95       	com	r22
 c70:	70 95       	com	r23
 c72:	80 95       	com	r24
 c74:	90 95       	com	r25
 c76:	9b 01       	movw	r18, r22
 c78:	ac 01       	movw	r20, r24
 c7a:	bd 01       	movw	r22, r26
 c7c:	cf 01       	movw	r24, r30
 c7e:	08 95       	ret

00000c80 <malloc>:
 c80:	0f 93       	push	r16
 c82:	1f 93       	push	r17
 c84:	cf 93       	push	r28
 c86:	df 93       	push	r29
 c88:	82 30       	cpi	r24, 0x02	; 2
 c8a:	91 05       	cpc	r25, r1
 c8c:	10 f4       	brcc	.+4      	; 0xc92 <malloc+0x12>
 c8e:	82 e0       	ldi	r24, 0x02	; 2
 c90:	90 e0       	ldi	r25, 0x00	; 0
 c92:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <__flp>
 c96:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <__flp+0x1>
 c9a:	20 e0       	ldi	r18, 0x00	; 0
 c9c:	30 e0       	ldi	r19, 0x00	; 0
 c9e:	a0 e0       	ldi	r26, 0x00	; 0
 ca0:	b0 e0       	ldi	r27, 0x00	; 0
 ca2:	30 97       	sbiw	r30, 0x00	; 0
 ca4:	19 f1       	breq	.+70     	; 0xcec <malloc+0x6c>
 ca6:	40 81       	ld	r20, Z
 ca8:	51 81       	ldd	r21, Z+1	; 0x01
 caa:	02 81       	ldd	r16, Z+2	; 0x02
 cac:	13 81       	ldd	r17, Z+3	; 0x03
 cae:	48 17       	cp	r20, r24
 cb0:	59 07       	cpc	r21, r25
 cb2:	c8 f0       	brcs	.+50     	; 0xce6 <malloc+0x66>
 cb4:	84 17       	cp	r24, r20
 cb6:	95 07       	cpc	r25, r21
 cb8:	69 f4       	brne	.+26     	; 0xcd4 <malloc+0x54>
 cba:	10 97       	sbiw	r26, 0x00	; 0
 cbc:	31 f0       	breq	.+12     	; 0xcca <malloc+0x4a>
 cbe:	12 96       	adiw	r26, 0x02	; 2
 cc0:	0c 93       	st	X, r16
 cc2:	12 97       	sbiw	r26, 0x02	; 2
 cc4:	13 96       	adiw	r26, 0x03	; 3
 cc6:	1c 93       	st	X, r17
 cc8:	27 c0       	rjmp	.+78     	; 0xd18 <malloc+0x98>
 cca:	00 93 69 00 	sts	0x0069, r16	; 0x800069 <__flp>
 cce:	10 93 6a 00 	sts	0x006A, r17	; 0x80006a <__flp+0x1>
 cd2:	22 c0       	rjmp	.+68     	; 0xd18 <malloc+0x98>
 cd4:	21 15       	cp	r18, r1
 cd6:	31 05       	cpc	r19, r1
 cd8:	19 f0       	breq	.+6      	; 0xce0 <malloc+0x60>
 cda:	42 17       	cp	r20, r18
 cdc:	53 07       	cpc	r21, r19
 cde:	18 f4       	brcc	.+6      	; 0xce6 <malloc+0x66>
 ce0:	9a 01       	movw	r18, r20
 ce2:	bd 01       	movw	r22, r26
 ce4:	ef 01       	movw	r28, r30
 ce6:	df 01       	movw	r26, r30
 ce8:	f8 01       	movw	r30, r16
 cea:	db cf       	rjmp	.-74     	; 0xca2 <malloc+0x22>
 cec:	21 15       	cp	r18, r1
 cee:	31 05       	cpc	r19, r1
 cf0:	f9 f0       	breq	.+62     	; 0xd30 <malloc+0xb0>
 cf2:	28 1b       	sub	r18, r24
 cf4:	39 0b       	sbc	r19, r25
 cf6:	24 30       	cpi	r18, 0x04	; 4
 cf8:	31 05       	cpc	r19, r1
 cfa:	80 f4       	brcc	.+32     	; 0xd1c <malloc+0x9c>
 cfc:	8a 81       	ldd	r24, Y+2	; 0x02
 cfe:	9b 81       	ldd	r25, Y+3	; 0x03
 d00:	61 15       	cp	r22, r1
 d02:	71 05       	cpc	r23, r1
 d04:	21 f0       	breq	.+8      	; 0xd0e <malloc+0x8e>
 d06:	fb 01       	movw	r30, r22
 d08:	93 83       	std	Z+3, r25	; 0x03
 d0a:	82 83       	std	Z+2, r24	; 0x02
 d0c:	04 c0       	rjmp	.+8      	; 0xd16 <malloc+0x96>
 d0e:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <__flp+0x1>
 d12:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__flp>
 d16:	fe 01       	movw	r30, r28
 d18:	32 96       	adiw	r30, 0x02	; 2
 d1a:	44 c0       	rjmp	.+136    	; 0xda4 <malloc+0x124>
 d1c:	fe 01       	movw	r30, r28
 d1e:	e2 0f       	add	r30, r18
 d20:	f3 1f       	adc	r31, r19
 d22:	81 93       	st	Z+, r24
 d24:	91 93       	st	Z+, r25
 d26:	22 50       	subi	r18, 0x02	; 2
 d28:	31 09       	sbc	r19, r1
 d2a:	39 83       	std	Y+1, r19	; 0x01
 d2c:	28 83       	st	Y, r18
 d2e:	3a c0       	rjmp	.+116    	; 0xda4 <malloc+0x124>
 d30:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <__brkval>
 d34:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <__brkval+0x1>
 d38:	23 2b       	or	r18, r19
 d3a:	41 f4       	brne	.+16     	; 0xd4c <malloc+0xcc>
 d3c:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
 d40:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
 d44:	30 93 68 00 	sts	0x0068, r19	; 0x800068 <__brkval+0x1>
 d48:	20 93 67 00 	sts	0x0067, r18	; 0x800067 <__brkval>
 d4c:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
 d50:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
 d54:	21 15       	cp	r18, r1
 d56:	31 05       	cpc	r19, r1
 d58:	41 f4       	brne	.+16     	; 0xd6a <malloc+0xea>
 d5a:	2d b7       	in	r18, 0x3d	; 61
 d5c:	3e b7       	in	r19, 0x3e	; 62
 d5e:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
 d62:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
 d66:	24 1b       	sub	r18, r20
 d68:	35 0b       	sbc	r19, r21
 d6a:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <__brkval>
 d6e:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <__brkval+0x1>
 d72:	e2 17       	cp	r30, r18
 d74:	f3 07       	cpc	r31, r19
 d76:	a0 f4       	brcc	.+40     	; 0xda0 <malloc+0x120>
 d78:	2e 1b       	sub	r18, r30
 d7a:	3f 0b       	sbc	r19, r31
 d7c:	28 17       	cp	r18, r24
 d7e:	39 07       	cpc	r19, r25
 d80:	78 f0       	brcs	.+30     	; 0xda0 <malloc+0x120>
 d82:	ac 01       	movw	r20, r24
 d84:	4e 5f       	subi	r20, 0xFE	; 254
 d86:	5f 4f       	sbci	r21, 0xFF	; 255
 d88:	24 17       	cp	r18, r20
 d8a:	35 07       	cpc	r19, r21
 d8c:	48 f0       	brcs	.+18     	; 0xda0 <malloc+0x120>
 d8e:	4e 0f       	add	r20, r30
 d90:	5f 1f       	adc	r21, r31
 d92:	50 93 68 00 	sts	0x0068, r21	; 0x800068 <__brkval+0x1>
 d96:	40 93 67 00 	sts	0x0067, r20	; 0x800067 <__brkval>
 d9a:	81 93       	st	Z+, r24
 d9c:	91 93       	st	Z+, r25
 d9e:	02 c0       	rjmp	.+4      	; 0xda4 <malloc+0x124>
 da0:	e0 e0       	ldi	r30, 0x00	; 0
 da2:	f0 e0       	ldi	r31, 0x00	; 0
 da4:	cf 01       	movw	r24, r30
 da6:	df 91       	pop	r29
 da8:	cf 91       	pop	r28
 daa:	1f 91       	pop	r17
 dac:	0f 91       	pop	r16
 dae:	08 95       	ret

00000db0 <free>:
 db0:	cf 93       	push	r28
 db2:	df 93       	push	r29
 db4:	00 97       	sbiw	r24, 0x00	; 0
 db6:	09 f4       	brne	.+2      	; 0xdba <free+0xa>
 db8:	81 c0       	rjmp	.+258    	; 0xebc <free+0x10c>
 dba:	fc 01       	movw	r30, r24
 dbc:	32 97       	sbiw	r30, 0x02	; 2
 dbe:	13 82       	std	Z+3, r1	; 0x03
 dc0:	12 82       	std	Z+2, r1	; 0x02
 dc2:	a0 91 69 00 	lds	r26, 0x0069	; 0x800069 <__flp>
 dc6:	b0 91 6a 00 	lds	r27, 0x006A	; 0x80006a <__flp+0x1>
 dca:	10 97       	sbiw	r26, 0x00	; 0
 dcc:	81 f4       	brne	.+32     	; 0xdee <free+0x3e>
 dce:	20 81       	ld	r18, Z
 dd0:	31 81       	ldd	r19, Z+1	; 0x01
 dd2:	82 0f       	add	r24, r18
 dd4:	93 1f       	adc	r25, r19
 dd6:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <__brkval>
 dda:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <__brkval+0x1>
 dde:	28 17       	cp	r18, r24
 de0:	39 07       	cpc	r19, r25
 de2:	51 f5       	brne	.+84     	; 0xe38 <free+0x88>
 de4:	f0 93 68 00 	sts	0x0068, r31	; 0x800068 <__brkval+0x1>
 de8:	e0 93 67 00 	sts	0x0067, r30	; 0x800067 <__brkval>
 dec:	67 c0       	rjmp	.+206    	; 0xebc <free+0x10c>
 dee:	ed 01       	movw	r28, r26
 df0:	20 e0       	ldi	r18, 0x00	; 0
 df2:	30 e0       	ldi	r19, 0x00	; 0
 df4:	ce 17       	cp	r28, r30
 df6:	df 07       	cpc	r29, r31
 df8:	40 f4       	brcc	.+16     	; 0xe0a <free+0x5a>
 dfa:	4a 81       	ldd	r20, Y+2	; 0x02
 dfc:	5b 81       	ldd	r21, Y+3	; 0x03
 dfe:	9e 01       	movw	r18, r28
 e00:	41 15       	cp	r20, r1
 e02:	51 05       	cpc	r21, r1
 e04:	f1 f0       	breq	.+60     	; 0xe42 <free+0x92>
 e06:	ea 01       	movw	r28, r20
 e08:	f5 cf       	rjmp	.-22     	; 0xdf4 <free+0x44>
 e0a:	d3 83       	std	Z+3, r29	; 0x03
 e0c:	c2 83       	std	Z+2, r28	; 0x02
 e0e:	40 81       	ld	r20, Z
 e10:	51 81       	ldd	r21, Z+1	; 0x01
 e12:	84 0f       	add	r24, r20
 e14:	95 1f       	adc	r25, r21
 e16:	c8 17       	cp	r28, r24
 e18:	d9 07       	cpc	r29, r25
 e1a:	59 f4       	brne	.+22     	; 0xe32 <free+0x82>
 e1c:	88 81       	ld	r24, Y
 e1e:	99 81       	ldd	r25, Y+1	; 0x01
 e20:	84 0f       	add	r24, r20
 e22:	95 1f       	adc	r25, r21
 e24:	02 96       	adiw	r24, 0x02	; 2
 e26:	91 83       	std	Z+1, r25	; 0x01
 e28:	80 83       	st	Z, r24
 e2a:	8a 81       	ldd	r24, Y+2	; 0x02
 e2c:	9b 81       	ldd	r25, Y+3	; 0x03
 e2e:	93 83       	std	Z+3, r25	; 0x03
 e30:	82 83       	std	Z+2, r24	; 0x02
 e32:	21 15       	cp	r18, r1
 e34:	31 05       	cpc	r19, r1
 e36:	29 f4       	brne	.+10     	; 0xe42 <free+0x92>
 e38:	f0 93 6a 00 	sts	0x006A, r31	; 0x80006a <__flp+0x1>
 e3c:	e0 93 69 00 	sts	0x0069, r30	; 0x800069 <__flp>
 e40:	3d c0       	rjmp	.+122    	; 0xebc <free+0x10c>
 e42:	e9 01       	movw	r28, r18
 e44:	fb 83       	std	Y+3, r31	; 0x03
 e46:	ea 83       	std	Y+2, r30	; 0x02
 e48:	49 91       	ld	r20, Y+
 e4a:	59 91       	ld	r21, Y+
 e4c:	c4 0f       	add	r28, r20
 e4e:	d5 1f       	adc	r29, r21
 e50:	ec 17       	cp	r30, r28
 e52:	fd 07       	cpc	r31, r29
 e54:	61 f4       	brne	.+24     	; 0xe6e <free+0xbe>
 e56:	80 81       	ld	r24, Z
 e58:	91 81       	ldd	r25, Z+1	; 0x01
 e5a:	84 0f       	add	r24, r20
 e5c:	95 1f       	adc	r25, r21
 e5e:	02 96       	adiw	r24, 0x02	; 2
 e60:	e9 01       	movw	r28, r18
 e62:	99 83       	std	Y+1, r25	; 0x01
 e64:	88 83       	st	Y, r24
 e66:	82 81       	ldd	r24, Z+2	; 0x02
 e68:	93 81       	ldd	r25, Z+3	; 0x03
 e6a:	9b 83       	std	Y+3, r25	; 0x03
 e6c:	8a 83       	std	Y+2, r24	; 0x02
 e6e:	e0 e0       	ldi	r30, 0x00	; 0
 e70:	f0 e0       	ldi	r31, 0x00	; 0
 e72:	12 96       	adiw	r26, 0x02	; 2
 e74:	8d 91       	ld	r24, X+
 e76:	9c 91       	ld	r25, X
 e78:	13 97       	sbiw	r26, 0x03	; 3
 e7a:	00 97       	sbiw	r24, 0x00	; 0
 e7c:	19 f0       	breq	.+6      	; 0xe84 <free+0xd4>
 e7e:	fd 01       	movw	r30, r26
 e80:	dc 01       	movw	r26, r24
 e82:	f7 cf       	rjmp	.-18     	; 0xe72 <free+0xc2>
 e84:	8d 91       	ld	r24, X+
 e86:	9c 91       	ld	r25, X
 e88:	11 97       	sbiw	r26, 0x01	; 1
 e8a:	9d 01       	movw	r18, r26
 e8c:	2e 5f       	subi	r18, 0xFE	; 254
 e8e:	3f 4f       	sbci	r19, 0xFF	; 255
 e90:	82 0f       	add	r24, r18
 e92:	93 1f       	adc	r25, r19
 e94:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <__brkval>
 e98:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <__brkval+0x1>
 e9c:	28 17       	cp	r18, r24
 e9e:	39 07       	cpc	r19, r25
 ea0:	69 f4       	brne	.+26     	; 0xebc <free+0x10c>
 ea2:	30 97       	sbiw	r30, 0x00	; 0
 ea4:	29 f4       	brne	.+10     	; 0xeb0 <free+0x100>
 ea6:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__flp+0x1>
 eaa:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__flp>
 eae:	02 c0       	rjmp	.+4      	; 0xeb4 <free+0x104>
 eb0:	13 82       	std	Z+3, r1	; 0x03
 eb2:	12 82       	std	Z+2, r1	; 0x02
 eb4:	b0 93 68 00 	sts	0x0068, r27	; 0x800068 <__brkval+0x1>
 eb8:	a0 93 67 00 	sts	0x0067, r26	; 0x800067 <__brkval>
 ebc:	df 91       	pop	r29
 ebe:	cf 91       	pop	r28
 ec0:	08 95       	ret

00000ec2 <_exit>:
 ec2:	f8 94       	cli

00000ec4 <__stop_program>:
 ec4:	ff cf       	rjmp	.-2      	; 0xec4 <__stop_program>
